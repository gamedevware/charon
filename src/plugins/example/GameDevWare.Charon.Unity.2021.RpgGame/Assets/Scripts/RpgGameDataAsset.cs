//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace Assets.Scripts
{
	using System;
	using System.IO;
	using System.Text;
	using UnityEngine;

	[Serializable]
    [global::System.CodeDom.Compiler.GeneratedCode("GameDevWare.Charon.Unity", "2019.3.6.0")]
	public partial class RpgGameDataAsset : ScriptableObject, ISerializationCallbackReceiver
	{
		[SerializeField, HideInInspector]
		private byte[] dataBytes; // is set by asset creator via reflection
		[SerializeField, HideInInspector]
		private string extension; // is set by asset creator via reflection
		[NonSerialized, HideInInspector]
		public Assets.Scripts.RpgGameData GameData;

		private RpgGameDataAsset()
		{

		}

		void ISerializationCallbackReceiver.OnBeforeSerialize()
		{
		}
		void ISerializationCallbackReceiver.OnAfterDeserialize()
		{
			var data = new MemoryStream(dataBytes, 0, dataBytes.Length, false);
			var encoding = Encoding.UTF8;
			var leaveOpen = false;

			switch (this.extension.Trim('.'))
			{
				case "gdjs":
				case "json":
					this.GameData = new Assets.Scripts.RpgGameData(data, Assets.Scripts.RpgGameData.Format.Json, null, encoding, leaveOpen);
					break;
				case "gdbs":
				case "bson":
					this.GameData = new Assets.Scripts.RpgGameData(data, Assets.Scripts.RpgGameData.Format.Bson, null, encoding, leaveOpen);
					break;
				case "gdmp":
				case "msgpack":
				case "msgpck":
					this.GameData = new Assets.Scripts.RpgGameData(data, Assets.Scripts.RpgGameData.Format.Xml, null, encoding, leaveOpen);
					break;
				case "gdml":
				case "xml":
					this.GameData = new Assets.Scripts.RpgGameData(data, Assets.Scripts.RpgGameData.Format.MessagePack, null, encoding, leaveOpen);
					break;
				default:
					throw new InvalidOperationException(string.Format("Unknown file extension '{0}'. Unable to determine file format by extension.",
						this.extension));
			}
		}
	}
}

