openapi: 3.0.1
info:
  title: Charon API
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /token/:
    post:
      tags:
        - Authentication
      summary: Obtain OAuth 2.0 access token
      description: Exchange authorization credentials for an access token using the OAuth 2.0 protocol. Supports authorization code and refresh token grant types.
      operationId: issueToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - grant_type
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Required when grant_type is 'refresh_token'
                  nullable: true
                code:
                  type: string
                  description: Required when grant_type is 'authorization_code'
                  nullable: true
                grant_type:
                  enum:
                    - authorization_code
                    - refresh_token
                  type: string
                  description: The OAuth 2.0 grant type to use
        required: true
      responses:
        '200':
          description: Successful token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthSuccessResponse'
        '400':
          description: Token request failure
          content:
            application/json:
              schema:
                required:
                  - error
                  - error_description
                  - error_uri
                type: object
                properties:
                  error:
                    enum:
                      - invalid_request
                      - invalid_client
                      - invalid_grant
                      - unauthorized_client
                      - unsupported_grant_type
                      - invalid_scope
                    type: string
                    description: OAuth 2.0 error code
                  error_description:
                    type: string
                    description: Human-readable error explanation
                  error_uri:
                    type: string
                    description: URI identifying the error
                x-name: OAuthFailureResponse
      x-custom-response: true
      x-rate-limiting:
        maxParallelRequests: 1
        grouping: IpAddress
      x-anonymous: true
  /auth/one-time-code/:
    post:
      tags:
        - Authentication
      summary: Generate one-time authorization code
      description: Generates a short-lived one-time code that can be used instead of standard authorization headers for WebSocket connections or download requests.
      operationId: issueOneTimeCode
      parameters:
        - name: Authorization
          in: header
          description: Standard bearer token for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: One-time code generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueOneTimeCodeResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /auth/flow/password/:
    post:
      tags:
        - Authentication
      summary: Initiate password authentication flow
      description: Begins the authentication process using email and password credentials. May return intermediate authentication stages if multi-factor authentication is required.
      operationId: beginPasswordAuthenticationFlow
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  maxLength: 256
                  minLength: 3
                  pattern: \w+@\w+
                  type: string
                  description: User's email address
                password:
                  $ref: '#/components/schemas/PasswordString'
              x-name: EmailPasswordAuthenticateRequest
        required: true
      responses:
        '200':
          description: Authentication flow stage response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPasswordAuthenticationFlowResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /auth/flow/email-code/:
    post:
      tags:
        - Authentication
      summary: Submit email verification code
      description: Continues the authentication flow by submitting a time-based one-time password (TOTP) received via email. Requires an active authentication flow ID.
      operationId: continueAuthenticationFlowWithEmailTotpCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - flowId
                - code
              type: object
              properties:
                flowId:
                  type: string
                  description: Active authentication flow identifier
                  format: objectId
                code:
                  maxLength: 1024
                  minLength: 1
                  type: string
                  description: TOTP code from email
              x-name: EmailTotpCodeAuthenticateRequest
        required: true
      responses:
        '200':
          description: Authentication flow stage response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinueAuthenticationFlowWithEmailTotpCodeResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /auth/flow/api-key/:
    post:
      tags:
        - Authentication
      summary: Initiate API key authentication flow
      description: Begins authentication using an API key credential. Returns the next stage in the authentication flow.
      operationId: beginApiKeyAuthenticationFlow
      requestBody:
        content:
          application/json:
            schema:
              required:
                - apiKey
              type: object
              properties:
                apiKey:
                  maxLength: 16384
                  minLength: 1
                  type: string
                  description: API key credential
              x-name: ApiKeyAuthenticateRequest
        required: true
      responses:
        '200':
          description: Authentication flow stage response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginApiKeyAuthenticationFlowResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /auth/flow/on-behalf/:
    post:
      tags:
        - Authentication
      summary: Initiate on-behalf authentication (Admin only)
      description: Allows administrators to begin an authentication flow on behalf of another user. Requires administrator privileges.
      operationId: beginOnBehalfAuthenticationFlow
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
              type: object
              properties:
                userId:
                  type: string
                  description: Target user ID to authenticate as
                  format: objectId
              x-name: OnBehalfAuthenticateRequest
        required: true
      responses:
        '200':
          description: Authentication flow stage response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginOnBehalfAuthenticationFlowResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/auth/flow/oauth2/{authenticationProvider}/prepare/':
    post:
      tags:
        - Authentication
      summary: Prepare OAuth 2.0 authentication URL
      description: Generates a redirect URL to initiate OAuth 2.0 authentication with the specified provider.
      operationId: beginOAuth2Authentication
      parameters:
        - $ref: '#/components/parameters/authenticationProvider'
      responses:
        '200':
          description: OAuth 2.0 redirect information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginOAuth2AuthenticationResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  '/auth/flow/oauth2/{authenticationProvider}/complete/':
    post:
      tags:
        - Authentication
      summary: Complete OAuth 2.0 authentication
      description: Finalizes the OAuth 2.0 authentication flow after user redirection from the provider. Processes the authorization code or error response from the OAuth provider.
      operationId: completeOAuth2Authentication
      parameters:
        - $ref: '#/components/parameters/authenticationProvider'
        - name: code
          in: query
          description: Authorization code from OAuth provider
          schema:
            type: string
            nullable: true
        - name: state
          in: query
          description: OAuth state parameter for CSRF protection
          required: true
          schema:
            type: string
        - name: error
          in: query
          description: OAuth error code if authentication failed
          schema:
            type: string
            nullable: true
        - name: error_description
          in: query
          description: Description of OAuth error
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Authentication flow stage response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteOAuth2AuthenticationResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /app/log/:
    put:
      tags:
        - Troubleshooting
      summary: Submit client-side log message to server
      description: Records a client-generated log message on the server. Primarily used for debugging purposes in standalone-hosted environments where direct client logging is not available. The server may store or process these logs for troubleshooting and monitoring.
      operationId: logMessage
      requestBody:
        content:
          application/json:
            schema:
              required:
                - message
                - sessionId
              type: object
              properties:
                message:
                  type: string
                  description: The log message content to be recorded
                  example: Failed to initialize component X
                sessionId:
                  $ref: '#/components/schemas/BrowserSessionId'
        required: true
      responses:
        '204':
          description: 'Log message was successfully received (though may not necessarily be persisted, depending on server configuration)'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /app/feedback/:
    put:
      tags:
        - Troubleshooting
      summary: Submit user feedback
      description: Allows users to submit feedback about their experience with the application. Includes a rating and optional message that will be recorded for product improvement.
      operationId: leaveFeedback
      requestBody:
        description: Feedback details to be submitted
        content:
          application/json:
            schema:
              required:
                - message
                - rating
              type: object
              properties:
                message:
                  maxLength: 2000
                  type: string
                  description: Detailed feedback message from the user. Should describe any issues encountered or suggestions for improvement.
                  example: The editor crashes when opening large game data files
                rating:
                  maximum: 5
                  minimum: 1
                  type: integer
                  description: 'User satisfaction rating where: - 1 = Very dissatisfied - 2 = Dissatisfied - 3 = Neutral - 4 = Satisfied - 5 = Very satisfied'
                  format: int32
                  example: 3
        required: true
      responses:
        '204':
          description: 'Feedback was successfully received and recorded. Note: This does not guarantee any follow-up action will be taken.'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /app/release-notes/:
    get:
      tags:
        - Troubleshooting
      summary: Get current version release notes
      description: 'Retrieves the release notes for the currently deployed server version. Includes information about new features, improvements, and bug fixes.'
      operationId: getReleaseNotes
      responses:
        '200':
          description: Successfully retrieved release notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReleaseNotesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/transaction/':
    put:
      tags:
        - DataSource
      summary: Initiate a new data source transaction
      description: 'Establishes a new transaction context with the specified data source. This operation: - Waits for data source availability (up to the specified start timeout) - Creates a transaction with the given unique identifier - Returns immediately if successful The transaction ID can be used in subsequent operations until committed or rolled back.'
      operationId: beginTransaction
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
                - executionTimeout
                - startTimeout
              type: object
              properties:
                id:
                  maxLength: 256
                  minLength: 16
                  type: string
                  description: Unique transaction identifier. Must be sufficiently complex to prevent collisions. Will be used to reference this transaction in subsequent operations.
                  example: e2dc2b30-859d-4ff0-beef-555169463872
                executionTimeout:
                  type: string
                  description: 'Maximum duration allowed for transaction execution (e.g., "00:30:00", "00:05:00"). Must be a positive duration value.'
                  format: time
                  example: '00:05:00'
                startTimeout:
                  type: string
                  description: 'Maximum wait time for data source to become available (e.g., "00:00:10", "00:01:00"). Must be a positive duration value.'
                  format: time
                  example: '00:00:10'
        required: true
      responses:
        '204':
          description: Transaction successfully initialized and ready for operations
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/transaction/{transactionId}/':
    post:
      tags:
        - DataSource
      summary: Commit an active transaction
      description: 'Permanently applies all changes made within the transaction scope. After successful commit, the transaction cannot be used for further operations.'
      operationId: commitTransaction
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/transactionId'
      responses:
        '204':
          description: Transaction successfully committed and resources released
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - DataSource
      summary: Roll back an active transaction
      description: Abandons all changes made within the transaction scope and releases resources. Can be called on already-failed transactions for cleanup.
      operationId: rejectTransaction
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/transactionId'
      responses:
        '204':
          description: Transaction successfully aborted or was already in a failed state. All temporary changes have been discarded.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/collection/{schemaNameOrId}/':
    get:
      tags:
        - DataSource
      summary: Retrieve a document by ID or unique property
      description: Fetches a single document using either its unique identifier or a specified unique property value. Returns null if no matching document is found.
      operationId: findDocument
      parameters:
        - name: uniqueSchemaPropertyNameOrId
          in: query
          description: 'The name of the unique property to search by (e.g., ''Id'', ''Name''). Can also be ''Id'' to search by document identifier.'
          required: true
          schema:
            type: string
            example: Item
        - name: uniqueSchemaPropertyValue
          in: query
          description: The value of the specified unique property to match
          required: true
          schema:
            type: string
            example: Sword
      responses:
        '200':
          description: Document found (or null if not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindDocumentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - DataSource
      summary: Create a new document
      description: Inserts a new document into the specified collection. The document will be validated according to the schema's rules.
      operationId: createDocument
      parameters:
        - $ref: '#/components/parameters/validationOptions'
      requestBody:
        description: The document data to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '200':
          description: Successfully created document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDocumentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - DataSource
      summary: Update an existing document
      description: Modifies an existing document in the collection. The entire document or only diff document could be provided with updated values.
      operationId: updateDocument
      parameters:
        - $ref: '#/components/parameters/validationOptions'
      requestBody:
        description: The complete document or diff document data with updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '200':
          description: Successfully updated document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDocumentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - DataSource
      summary: Delete a document by ID
      description: 'Removes a document from the collection using its unique identifier. Returns the deleted document if found, otherwise returns null.'
      operationId: deleteDocument
      parameters:
        - name: id
          in: query
          description: The unique identifier of the document to delete
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Document deletion result (deleted document or null)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/schemaNameOrId'
      - $ref: '#/components/parameters/dataSourceId'
      - $ref: '#/components/parameters/transaction'
  '/datasource/{dataSourceId}/collection/{schemaNameOrId}/documents/':
    post:
      tags:
        - DataSource
      summary: Query documents with filtering and pagination
      description: 'Retrieves a list of documents matching specified criteria. Supports filtering, sorting, pagination, and full-text search.'
      operationId: listDocuments
      requestBody:
        description: Document query parameters
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: 'Path to nested documents (e.g., ''/Item'') in RFC-6901 (JSON Pointer) format. Use ''*'' for all embedded documents or null for root documents only.'
                  nullable: true
                  example: /Item
                skip:
                  minimum: 0
                  type: integer
                  description: Number of documents to skip (for pagination)
                  format: int32
                  nullable: true
                  example: 100
                take:
                  minimum: 0
                  type: integer
                  description: Maximum number of documents to return
                  format: int32
                  nullable: true
                  example: 25
                query:
                  type: string
                  description: Full-text search term to match across all document fields
                  nullable: true
                  example: Sword
                select:
                  type: array
                  items:
                    minLength: 1
                    type: string
                    example: /Name
                  description: 'Specifies in RFC-6901 (JSON Pointer) format which fields to include in the response. - If null or empty, all available fields are returned - The ''Id'' field is always included regardless of selection - Field names are case-sensitive - Nested fields can be specified using slash notation (e.g., "/Item/Name")'
                  nullable: true
                  example:
                    - /Id
                    - /Name
                    - /Price
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/Filter'
                  description: Advanced filtering criteria
                  nullable: true
                sorters:
                  type: array
                  items:
                    $ref: '#/components/schemas/Sorter'
                  description: Sorting specifications
                  nullable: true
        required: true
      responses:
        '200':
          description: List of matching documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - DataSource
      summary: Perform bulk document operations
      description: 'Creates, updates, or deletes multiple documents in a single operation. Supports different import modes and optional dry-run validation.'
      operationId: bulkChangeDocuments
      parameters:
        - $ref: '#/components/parameters/validationOptions'
        - $ref: '#/components/parameters/dryRun'
        - name: importMode
          in: query
          description: Determines how documents should be processed.
          required: true
          schema:
            $ref: '#/components/schemas/ImportMode'
      requestBody:
        description: Array of documents to process
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonObject'
              description: 'Documents to create, update, or delete'
        required: true
      responses:
        '200':
          description: Bulk operation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkChangeDocumentsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/schemaNameOrId'
      - $ref: '#/components/parameters/dataSourceId'
      - $ref: '#/components/parameters/transaction'
  '/datasource/{dataSourceId}/documents/query/':
    get:
      tags:
        - DataSource
      summary: Search across all collections
      description: Performs a full-text search across all documents in all collections. Results are streamed as they become available using Server-Sent Events (SSE). Empty results are omitted from the stream.
      operationId: queryDocuments
      parameters:
        - name: query
          in: query
          description: Search term to match across all document fields. Supports partial matches and full-text search.
          required: true
          schema:
            type: string
            nullable: true
            example: Item
        - name: limit
          in: query
          description: 'Maximum number of documents to return. If not specified, returns all matching documents.'
          schema:
            minimum: 1
            type: integer
            format: int32
            nullable: true
            example: 50
      responses:
        '200':
          description: Stream of search results as Server-Sent Events. Each event contains a ListResult object with matching documents.
          content:
            text/event-stream:
              schema:
                type: object
                description: SSE stream of document batches
      security:
        - BearerAuth: [ ]
      x-custom-response: true
    post:
      tags:
        - DataSource
      summary: Batch retrieve documents by unique identifiers
      description: Efficiently fetches multiple documents in a single request by their unique properties. Maximum 20 documents per request. Results are returned in the same order as requested.
      operationId: pickDocuments
      requestBody:
        description: Array of document lookup requests
        content:
          application/json:
            schema:
              maxItems: 20
              minItems: 1
              type: array
              items:
                required:
                  - schemaNameOrId
                  - uniqueSchemaPropertyNameOrId
                  - uniqueSchemaPropertyValue
                type: object
                properties:
                  schemaNameOrId:
                    type: string
                    description: The collection name or ID where the document resides
                    example: Item
                  uniqueSchemaPropertyNameOrId:
                    type: string
                    description: 'The unique property name to match (e.g., ''Id'', ''Name'')'
                    example: Id
                  uniqueSchemaPropertyValue:
                    type: string
                    description: The exact value of the specified unique property
                    example: Sword
                x-name: FindRequest
        required: true
      responses:
        '200':
          description: Array of document lookup results in the same order as requested. Each element is either the found document or null if not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickDocumentsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/dataSourceId'
      - $ref: '#/components/parameters/transaction'
  '/datasource/{dataSourceId}/converter/raw/':
    post:
      tags:
        - DataSource
      summary: Convert game data to raw JSON format
      description: 'Converts game data documents from various formats (XLSX, XLIF, MsgPack, BSON) directly to raw JSON output without any response wrapper.'
      operationId: convertGameDataRaw
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/importSchemaNameOrId'
      requestBody:
        description: Game data document in supported input format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/x-msgpack:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/bson:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/xliff+xml;version=1:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/xliff+xml;version=2:
            schema:
              $ref: '#/components/schemas/JsonValue'
        required: true
      responses:
        '200':
          description: Successfully converted raw JSON document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawResponse'
        default:
          description: Conversion error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/collections/raw/':
    get:
      tags:
        - DataSource
      summary: Export multiple collections in raw format
      description: 'Exports documents from specified collections directly in downloadable formats (JSON, MsgPack, BSON, XLSX, XLIF) without any response wrapper. Supports filtering by schemas, properties and languages.'
      operationId: exportRaw
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/transaction'
        - $ref: '#/components/parameters/exportMode'
        - $ref: '#/components/parameters/schemas'
        - $ref: '#/components/parameters/properties'
        - $ref: '#/components/parameters/languages'
        - $ref: '#/components/parameters/download'
      responses:
        '200':
          description: Raw exported documents in requested format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/bson:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/xliff+xml;version=1:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/xliff+xml;version=2:
              schema:
                $ref: '#/components/schemas/RawResponse'
        default:
          description: Export operation failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/raw/':
    get:
      tags:
        - DataSource
      summary: Create raw data source backup
      description: 'Generates a complete backup of the data source in raw format (JSON, MsgPack, BSON) without any response wrapper. The backup can be downloaded directly.'
      operationId: backupRaw
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/download'
      responses:
        '200':
          description: Raw backup data in requested format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/RawResponse'
            application/bson:
              schema:
                $ref: '#/components/schemas/RawResponse'
        default:
          description: Backup operation failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/collections/':
    get:
      tags:
        - DataSource
      summary: Export documents from multiple collections
      description: 'Exports documents from specified collections in various formats (JSON, MsgPack, BSON, XLSX, XLIF). Supports filtering by schemas, properties, and languages. The export can be customized using different modes.'
      operationId: export
      parameters:
        - $ref: '#/components/parameters/exportMode'
        - $ref: '#/components/parameters/schemas'
        - $ref: '#/components/parameters/properties'
        - $ref: '#/components/parameters/languages'
      responses:
        '200':
          description: Successfully exported documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            application/bson:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            application/xliff+xml;version=1:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            application/xliff+xml;version=2:
              schema:
                $ref: '#/components/schemas/ExportResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - DataSource
      summary: Import documents into multiple collections
      description: 'Bulk import documents into specified collections. Supports various data formats (JSON, MsgPack, BSON, XLSX, XLIF) and different import modes (create, update, upsert). Includes validation and dry-run capabilities.'
      operationId: import
      parameters:
        - $ref: '#/components/parameters/importMode'
        - $ref: '#/components/parameters/schemas'
        - $ref: '#/components/parameters/languages'
        - $ref: '#/components/parameters/validationOptions'
        - $ref: '#/components/parameters/dryRun'
      requestBody:
        description: Documents to import in supported format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/x-msgpack:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/bson:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/xliff+xml;version=1:
            schema:
              $ref: '#/components/schemas/JsonValue'
          application/xliff+xml;version=2:
            schema:
              $ref: '#/components/schemas/JsonValue'
        required: true
      responses:
        '200':
          description: Detailed import operation report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/dataSourceId'
      - $ref: '#/components/parameters/transaction'
  '/datasource/{dataSourceId}/':
    get:
      tags:
        - DataSource
      summary: Create complete data source backup
      description: 'Generates a comprehensive backup of the entire data source including all collections and documents. The backup can be exported in multiple formats (JSON, MsgPack, BSON).'
      operationId: backup
      responses:
        '200':
          description: Successful backup result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupResponse'
            application/x-msgpack:
              schema:
                $ref: '#/components/schemas/BackupResponse'
            application/bson:
              schema:
                $ref: '#/components/schemas/BackupResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - DataSource
      summary: Restore data source from backup
      description: 'Restores the entire data source from a previously created backup. Supports restoration from various formats (JSON, MsgPack, BSON).'
      operationId: restore
      requestBody:
        description: Backup data in supported format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
          application/x-msgpack:
            schema:
              $ref: '#/components/schemas/JsonObject'
          application/bson:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '200':
          description: Restoration operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/dataSourceId'
  '/datasource/{dataSourceId}/validity/':
    post:
      tags:
        - DataSource
      summary: Validate data source configuration
      description: 'Performs comprehensive validation of the data source against specified requirements. Checks schema definitions, data integrity, and translation fullness.'
      operationId: validate
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/transaction'
        - $ref: '#/components/parameters/validationOptions'
      responses:
        '200':
          description: Validation results including any issues found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/loading-progress/':
    get:
      tags:
        - DataSource
      summary: Check data source loading status
      description: Retrieves the current loading progress and operational state of the data source. Useful for monitoring initialization or migration processes.
      operationId: getLoadingProgress
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      responses:
        '200':
          description: Current loading state with progress message and percentage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLoadingProgressResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/capabilities/':
    get:
      tags:
        - DataSourceCapabilities
      summary: Retrieve data source capabilities
      description: 'Returns the supported features and limitations of the data source, including supported query operations, indexing capabilities, and schema features.'
      operationId: getCapabilities
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      responses:
        '200':
          description: Complete capability profile of the data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCapabilitiesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/stats/':
    get:
      tags:
        - DataSource
      summary: Get data source issues statistics
      description: Returns issue metrics about the data source including document counts and issues count.
      operationId: examine
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/transaction'
      responses:
        '200':
          description: Detailed statistical overview of the data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExamineResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/present-users/':
    get:
      tags:
        - UserPresence
      summary: Get active users in data source
      description: 'Retrieves a list of users currently active in the specified data source, including their presence status and user identifiers.'
      operationId: getDataSourcePresentUsers
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      responses:
        '200':
          description: Array of user presence records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataSourcePresentUsersResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/source-code/':
    post:
      tags:
        - DataSource
      summary: Generate data source SDK
      description: Creates a source code SDK for the data source in the specified programming language. Supports various code generation options and optimizations. Returns a ZIP archive.
      operationId: generateSourceCode
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/download'
      requestBody:
        description: Source code generation configuration
        content:
          application/json:
            schema:
              required:
                - targetLanguage
                - documentClassName
                - gameDataClassName
                - namespace
                - defineConstants
                - lineEndings
                - indentation
                - splitFiles
                - optimizations
              type: object
              properties:
                targetLanguage:
                  $ref: '#/components/schemas/TargetSourceCodeLanguage'
                documentClassName:
                  type: string
                  description: Base class name for document types
                gameDataClassName:
                  type: string
                  description: Main class name for game data access
                namespace:
                  type: string
                  description: Root namespace for generated code
                defineConstants:
                  type: string
                  description: Compiler constants to include
                lineEndings:
                  enum:
                    - windows
                    - unix
                  type: string
                  description: Line ending style for generated files
                  x-name: SourceCodeLineEndings
                indentation:
                  enum:
                    - tabs
                    - twoSpaces
                    - fourSpaces
                  type: string
                  description: Indentation style for generated code
                  x-name: SourceCodeIndentation
                splitFiles:
                  type: boolean
                  description: Whether to split classes into separate files
                optimizations:
                  type: array
                  items:
                    enum:
                      - eagerReferenceResolution
                      - rawReferences
                      - rawLocalizedTexts
                      - disableStringPooling
                      - disableJsonSerialization
                      - disableMessagePackSerialization
                      - disablePatching
                      - disableFormulaCompilation
                      - disableDocumentIdEnums
                    type: string
                    x-name: SourceCodeGenerationOptimizations
                  description: Code generation optimization flags
        required: true
      responses:
        '200':
          description: ZIP archive containing generated source code
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Blob'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/source-code/templates/':
    get:
      tags:
        - DataSource
      summary: Download source code templates
      description: Retrieves T4 templates used for source code generation. These templates can be customized for specialized SDK generation.
      operationId: getSourceCodeGenerationTemplate
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/download'
      responses:
        '200':
          description: ZIP archive containing template files
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Blob'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/process/':
    get:
      tags:
        - Processes
      summary: List all processes
      description: Retrieves a paginated list of both running and completed processes with their current states.
      operationId: listProcesses
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
      responses:
        '200':
          description: Paginated list of processes with their states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProcessesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/process/{processId}/':
    get:
      tags:
        - Processes
      summary: Get process details
      description: Retrieves the complete state information for a specific process.
      operationId: getProcess
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/dataSourceId'
      responses:
        '200':
          description: Detailed state of the requested process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProcessResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Processes
      summary: Terminate a running process
      description: Gracefully stops a currently running process with the specified reason.
      operationId: stopProcess
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/dataSourceId'
        - name: stopReason
          in: query
          description: 'Reason for process termination (e.g., ''user_request'', ''maintenance'')'
          required: true
          schema:
            type: string
            example: user_request
      responses:
        '200':
          description: Final state of the stopped process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopProcessResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/process/{processId}/result/raw/':
    get:
      tags:
        - Processes
      summary: Get raw process results
      description: Retrieves the direct output of a completed process without standard response formatting.
      operationId: getProcessResultRaw
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/download'
      responses:
        '200':
          description: Raw process output in its native format
          content:
            application/json:
              schema:
                type: object
                description: The exact output structure varies by process type
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/formula/type/':
    get:
      tags:
        - Formulas
      summary: List available formula types
      description: Retrieves a paginated list of formula types/classes that can be used in game data formulas. Supports filtering by type name and pagination.
      operationId: listFormulaTypes
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
        - name: query
          in: query
          description: "Search term for filtering types. Can be:\n- Exact type name (e.g., \"DateTime\")\n- Type alias (e.g. int, long)\n- Partial name (e.g., \"Date\")\n- Capital letters (e.g., \"DT\" for \"DateTime\")\n"
          schema:
            type: string
            nullable: true
            example: DT
      responses:
        '200':
          description: Paginated list of matching formula types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFormulaTypesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/assets/':
    get:
      tags:
        - Assets
      summary: List available assets
      description: 'Retrieves a paginated list of assets available in the project that can be referenced from game data. Supports filtering by asset type and name, with pagination.'
      operationId: listAssets
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
        - name: query
          in: query
          description: Search term to filter asset names (empty returns all)
          schema:
            type: string
            nullable: true
            example: DT
        - name: types
          in: query
          description: Filter by specific asset types (empty returns all)
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Paginated list of matching assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssetsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/assets/thumbnail/{path}':
    get:
      tags:
        - Assets
      summary: Get asset thumbnail
      description: 'Retrieves a thumbnail image (PNG format) for the specified asset. The asset can be identified by various methods including path, unique ID, or numeric ID.'
      operationId: getAssetThumbnail
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/path'
        - name: size
          in: query
          description: Preferred thumbnail dimensions (width x height in pixels)
          schema:
            type: integer
            format: int32
            nullable: true
      responses:
        '200':
          description: PNG thumbnail image of the requested asset
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/Blob'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/completion/schema/':
    post:
      tags:
        - AiCompletion
      summary: Generate schema design suggestions using AI
      description: Uses AI to propose a game data schema structure based on provided context and requirements.
      operationId: suggestSchemaDesign
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - existingSchemas
                - userPrompt
              type: object
              properties:
                contextSchema:
                  type: string
                  description: Existing schema context to inform the AI suggestions
                  nullable: true
                existingSchemas:
                  type: array
                  items:
                    type: string
                  description: Array of related schema names for reference
                userPrompt:
                  maxLength: 16384
                  minLength: 2
                  type: string
                  description: Natural language description of the desired schema
        required: true
      responses:
        '200':
          description: AI-generated schema suggestions in natural language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestSchemaDesignResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/completion/schema/icon/':
    post:
      tags:
        - AiCompletion
      summary: Generate icon suggestions for a schema
      description: Uses AI to recommend appropriate icons for a given schema based on its name and description.
      operationId: suggestSchemaIcon
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - name: iconSet
          in: query
          description: 'Preferred icon set to use (e.g., ''material'', ''fugue'')'
          required: true
          schema:
            maxLength: 128
            minLength: 1
            type: string
        - name: schemaName
          in: query
          description: Name of the schema needing an icon
          required: true
          schema:
            maxLength: 128
            minLength: 1
            type: string
        - name: schemaDescription
          in: query
          description: Optional description to help icon selection
          schema:
            maxLength: 2048
            type: string
            nullable: true
      responses:
        '200':
          description: AI-generated icon suggestions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestSchemaIconResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/completion/thread/{threadId}/':
    post:
      tags:
        - AiCompletion
      summary: Continue an AI conversation thread
      description: Sends a new message to an existing AI chat thread and gets the AI's response.
      operationId: sendAiChatMessage
      requestBody:
        content:
          application/json:
            schema:
              required:
                - regenerate
                - userPrompt
              type: object
              properties:
                regenerate:
                  type: boolean
                  description: Whether to regenerate the last response
                userPrompt:
                  maxLength: 16384
                  minLength: 2
                  type: string
                  description: The user's message to the AI
        required: true
      responses:
        '200':
          description: AI's response in the conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendAiChatMessageResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - AiCompletion
      summary: Delete an AI conversation thread
      description: Permanently removes the specified chat thread and all its messages.
      operationId: deleteAiChatThread
      responses:
        '204':
          description: Thread was successfully deleted
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/dataSourceId'
      - $ref: '#/components/parameters/threadId'
  '/datasource/{dataSourceId}/translation/':
    post:
      tags:
        - MachineTranslation
      summary: Initiate bulk translation
      description: Starts asynchronous translation of game data across multiple schemas and languages.
      operationId: translate
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/schemas'
        - $ref: '#/components/parameters/languages'
        - $ref: '#/components/parameters/translationMode'
      responses:
        '202':
          description: Translation job was successfully queued
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/collection/{schemaNameOrId}/translation/':
    post:
      tags:
        - MachineTranslation
      summary: Translate a single document
      description: Synchronously translates a specific document between the specified languages.
      operationId: translateDocument
      parameters:
        - $ref: '#/components/parameters/schemaNameOrId'
        - $ref: '#/components/parameters/dataSourceId'
        - $ref: '#/components/parameters/languages'
        - $ref: '#/components/parameters/translationMode'
      requestBody:
        description: The document to be translated in JSON format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '200':
          description: The translated document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateDocumentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/datasource/{dataSourceId}/extensions/content/{packageNameAndPath}':
    get:
      tags:
        - UiExtensions
      summary: Get a specific file from an NPM package
      description: Retrieves a file from the specified NPM package. The response content type is automatically determined by the file extension.
      operationId: retrievePackageFile
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - name: packageNameAndPath
          in: path
          description: "The NPM package name and relative path to the file within the package.\nFormat: `package-name/path/to/file`\n"
          required: true
          schema:
            type: string
          x-wildcard-capture: true
      responses:
        '200':
          description: The requested file content
          content:
            application/octet-stream:
              schema:
                type: object
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/extensions/status/{packageName}':
    get:
      tags:
        - UiExtensions
      summary: Get or initiate package loading status
      description: "Retrieves the loading status of an NPM package. If the package isn't currently loading,\nthis request will initiate the loading process. Returns a stream of status updates.\n"
      operationId: retrievePackageLoadStatus
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
        - name: packageName
          in: path
          description: The name of the NPM package to check or load
          required: true
          schema:
            type: string
          x-wildcard-capture: true
      responses:
        '200':
          description: Server-Sent Events stream of package loading status updates
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ExtensionPackageLoadProgress'
      security:
        - BearerAuth: [ ]
      x-custom-response: true
  '/datasource/{dataSourceId}/extensions/updates':
    post:
      tags:
        - UiExtensions
      summary: Check for UI extension package updates
      description: "Verifies if newer versions are available for installed NPM packages used in UI extensions.\nBehavior notes: - Automatically reloads any stale/outdated packages - Skips packages that are currently in the process of loading - Returns immediately after initiating the check (operation is asynchronous)"
      operationId: checkForPackageUpdates
      parameters:
        - $ref: '#/components/parameters/dataSourceId'
      responses:
        '202':
          description: 'Update check initiated successfully. Note: This only indicates the request was accepted, not that updates were found.'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/project/{projectId}/preferences/':
    get:
      tags:
        - Preferences
      summary: Get project team-shared preferences.
      operationId: loadProjectSharedPreferences
      responses:
        '200':
          description: Preferences object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadProjectSharedPreferencesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Preferences
      summary: Save project team-shared preferences.
      operationId: saveProjectSharedPreferences
      requestBody:
        description: Preferences object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '204':
          description: Preferences has been saved.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    patch:
      tags:
        - Preferences
      summary: Patch project team-shared preferences.
      operationId: patchProjectSharedPreferences
      requestBody:
        description: Patch object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatches'
        required: true
      responses:
        '204':
          description: Patch has been applyed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/preferences/user/':
    get:
      tags:
        - Preferences
      summary: Get project user's preferences.
      operationId: loadProjectPersonalPreferences
      responses:
        '200':
          description: Preferences object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadProjectPersonalPreferencesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Preferences
      summary: Save project user's preferences.
      operationId: saveProjectPersonalPreferences
      requestBody:
        description: Preferences object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '204':
          description: Preferences has been saved.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    patch:
      tags:
        - Preferences
      summary: Patch project user's preferences.
      operationId: patchProjectPersonalPreferences
      requestBody:
        description: Patch object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatches'
        required: true
      responses:
        '204':
          description: Patch has been applied.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/workspace/{workspaceId}/preferences/':
    get:
      tags:
        - Preferences
      summary: Get workspace team-shared preferences.
      operationId: loadWorkspaceSharedPreferences
      responses:
        '200':
          description: Preferences object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadWorkspaceSharedPreferencesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Preferences
      summary: Save workspace team-shared preferences.
      operationId: saveWorkspaceSharedPreferences
      requestBody:
        description: Preferences object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '204':
          description: Preferences has been saved.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    patch:
      tags:
        - Preferences
      summary: Patch workspace team-shared preferences.
      operationId: patchWorkspaceSharedPreferences
      requestBody:
        description: Patch object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatches'
        required: true
      responses:
        '204':
          description: Patch has been applyed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspace/{workspaceId}/preferences/user/':
    get:
      tags:
        - Preferences
      summary: Get user's workspace preferences.
      operationId: loadWorkspacePersonalPreferences
      responses:
        '200':
          description: Preferences object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadWorkspacePersonalPreferencesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Preferences
      summary: Save user's workspace preferences.
      operationId: saveWorkspacePersonalPreferences
      requestBody:
        description: Preferences object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '204':
          description: Preferences has been saved.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    patch:
      tags:
        - Preferences
      summary: Patch user's workspace preferences.
      operationId: patchWorkspacePersonalPreferences
      requestBody:
        description: Patch object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatches'
        required: true
      responses:
        '204':
          description: Patch has been applyed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /preferences/user/:
    delete:
      tags:
        - Preferences
      summary: Reset all user's preferences.
      operationId: resetUserPreferences
      responses:
        '204':
          description: Preferences has been reset.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /preferences/:
    get:
      tags:
        - Preferences
      summary: Get default preferences.
      operationId: loadDefaultPreferences
      responses:
        '200':
          description: Preferences object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadDefaultPreferencesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Preferences
      summary: Save default preferences.
      operationId: saveDefaultPreferences
      requestBody:
        description: Preferences object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        '204':
          description: Preferences has been saved.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    patch:
      tags:
        - Preferences
      summary: Patch default preferences.
      operationId: patchDefaultPreferences
      requestBody:
        description: Patch object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonPatches'
        required: true
      responses:
        '204':
          description: Patch has been applyed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /user/:
    get:
      tags:
        - User
      summary: Get all available users.
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
        - name: query
          in: query
          description: Any value to search in user name or email.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUsersResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - User
      summary: Create user with specified parameters.
      operationId: createUser
      requestBody:
        description: User registration information.
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - passwordCredential
              type: object
              properties:
                name:
                  maxLength: 128
                  minLength: 2
                  type: string
                pictureUrl:
                  maxLength: 1024
                  type: string
                  nullable: true
                email:
                  maxLength: 256
                  minLength: 3
                  pattern: \w+@\w+
                  type: string
                passwordCredential:
                  required:
                    - password
                  type: object
                  properties:
                    password:
                      $ref: '#/components/schemas/PasswordString'
                  nullable: true
                  x-name: UserCreationPasswordCredential
              x-name: UserCreationRequest
        required: true
      responses:
        '201':
          description: User has been created.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /user/public/:
    post:
      tags:
        - User
      summary: Get public profiles of users by their ids.
      operationId: getPublicUserProfiles
      requestBody:
        description: User registration information.
        content:
          application/json:
            schema:
              minItems: 1
              type: array
              items:
                type: string
                format: objectId
        required: true
      responses:
        '200':
          description: List of user public profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicUserProfilesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /user/me/:
    get:
      tags:
        - User
      summary: Get current user.
      operationId: getCurrentUser
      responses:
        '200':
          description: Found user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /user/password-reset/:
    put:
      tags:
        - User
      summary: Request password reset.
      operationId: requestPasswordReset
      requestBody:
        description: User reset request information.
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  pattern: \w+@\w+
                  type: string
              x-name: UserPasswordResetRequest
        required: true
      responses:
        '204':
          description: Password reset request has been accepted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
    post:
      tags:
        - User
      summary: Change user password by using code from email.
      operationId: resetPassword
      requestBody:
        description: User password reset information.
        content:
          application/json:
            schema:
              required:
                - code
                - newPassword
              type: object
              properties:
                code:
                  minLength: 24
                  type: string
                newPassword:
                  $ref: '#/components/schemas/PasswordString'
              x-name: UserResetPasswordRequest
        required: true
      responses:
        '204':
          description: Password has been reset.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  '/user/{userId}/':
    get:
      tags:
        - User
      summary: Get user by id.
      operationId: getUser
      responses:
        '200':
          description: Found user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - User
      summary: Update user with new parameters.
      operationId: updateUser
      requestBody:
        description: User update information.
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  maxLength: 64
                  minLength: 2
                  type: string
                  nullable: true
                newEmail:
                  pattern: \w+@\w+
                  type: string
                  nullable: true
                newPictureUrl:
                  type: string
                  nullable: true
              x-name: UpdateUserRequest
        required: true
      responses:
        '200':
          description: Updated workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - User
      summary: 'Strip personal information from user, quit all groups and block any access to this user.'
      operationId: deleteUser
      responses:
        '204':
          description: User has been soft-deleted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/public/':
    get:
      tags:
        - User
      summary: Get user public profile by id.
      operationId: getPublicUserProfile
      responses:
        '200':
          description: Found user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicUserProfileResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/login/password/':
    post:
      tags:
        - User
      summary: Change user password by using temporary code or old password.
      operationId: changePassword
      requestBody:
        description: User password change information.
        content:
          application/json:
            schema:
              required:
                - currentPassword
                - newPassword
              type: object
              properties:
                currentPassword:
                  $ref: '#/components/schemas/PasswordString'
                newPassword:
                  $ref: '#/components/schemas/PasswordString'
              x-name: UserChangePasswordRequest
        required: true
      responses:
        '204':
          description: Password has been changed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/mfa/email-code/':
    post:
      tags:
        - User
      summary: Configure email-code multi-factor authentication.
      operationId: configureMfaEmailTotpCode
      requestBody:
        description: User password change information.
        content:
          application/json:
            schema:
              required:
                - isEnabled
              type: object
              properties:
                isEnabled:
                  type: boolean
              x-name: ConfigureEmailCodeMfaRequest
        required: true
      responses:
        '204':
          description: Multi-factor authentication has been configured.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/login/tokens/':
    delete:
      tags:
        - User
      summary: Revoke all issues tokens for specified user.
      operationId: revokeAllTokens
      responses:
        '204':
          description: All tokens have been revokes. It is required to re-authenticate after this call.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/login/api-key/':
    post:
      tags:
        - User
      summary: Add API key login to user.
      operationId: addApiKeyLogin
      requestBody:
        description: API key information.
        content:
          application/json:
            schema:
              required:
                - title
                - expirationTimeSeconds
              type: object
              properties:
                title:
                  maxLength: 64
                  minLength: 1
                  type: string
                expirationTimeSeconds:
                  minimum: 60
                  type: integer
                  description: Key expiration time in seconds. Null for non-expiring key.
                  format: int32
                  nullable: true
              x-name: AddApiKeyRequest
        required: true
      responses:
        '200':
          description: List of workspaces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddApiKeyLoginResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - User
      summary: Delete API key login from user.
      operationId: deleteApiKeyLogin
      parameters:
        - name: id
          in: query
          description: Id of UserLogin with API key.
          required: true
          schema:
            minLength: 24
            type: string
      responses:
        '204':
          description: API key has been deleted and no longer valid.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/invitations/{invitationId}/':
    post:
      tags:
        - User
      summary: Accept invitation.
      operationId: acceptInvitation
      responses:
        '204':
          description: Invitation has been accepted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - User
      summary: Decline invitation.
      operationId: declineInvitation
      responses:
        '204':
          description: Invitation has been dismissed.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/invitationId'
  /workspace/:
    get:
      tags:
        - Workspace
      summary: Get all available workspaces.
      operationId: getAllWorkspaces
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
        - name: query
          in: query
          description: Any value to search in workspace name.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: List of workspaces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllWorkspacesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /workspace/my/:
    get:
      tags:
        - Workspace
      summary: Get current user's workspaces.
      operationId: getCurrentWorkspaces
      responses:
        '200':
          description: List of known workspaces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentWorkspacesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/workspace/{workspaceId}/':
    get:
      tags:
        - Workspace
      summary: Get workspace by id.
      operationId: getWorkspace
      responses:
        '200':
          description: Found Workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Workspace
      summary: Update workspace with new parameters.
      operationId: updateWorkspace
      requestBody:
        description: Workspace update information.
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  maxLength: 64
                  minLength: 2
                  type: string
                  nullable: true
                newPictureUrl:
                  type: string
                  nullable: true
              x-name: UpdateWorkspaceRequest
        required: true
      responses:
        '200':
          description: Updated workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWorkspaceResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspace/{workspaceId}/quota-usage/':
    post:
      tags:
        - WorkspaceQuota
      summary: Get workspace quota usage.
      operationId: getWorkspaceQuotaUsage
      responses:
        '200':
          description: Found Workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceQuotaUsageResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspace/{workspaceId}/administrators/':
    put:
      tags:
        - Workspace
      summary: Promote member to workspace administrators.
      operationId: promoteToWorkspaceAdministrator
      parameters:
        - name: memberUserId
          in: query
          description: Member user id.
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '204':
          description: Member has been promoted to administrator.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - Workspace
      summary: Demote member from workspace administrators.
      operationId: demoteFromWorkspaceAdministrator
      parameters:
        - name: memberUserId
          in: query
          description: Member user id.
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '204':
          description: Member has been demoted from administrator.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspace/{workspaceId}/members/':
    get:
      tags:
        - Workspace
      summary: Get workspace members.
      operationId: getWorkspaceMembers
      responses:
        '200':
          description: Workspace members.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceMembersResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /project/:
    get:
      tags:
        - Project
      summary: Get all available projects.
      operationId: getAllProjects
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/take'
        - name: query
          in: query
          description: Any value to search in project name.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: List of projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProjectsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    put:
      tags:
        - Project
      summary: Create new project.
      operationId: createProject
      requestBody:
        description: Project creation parameters.
        content:
          application/json:
            schema:
              required:
                - workspaceId
                - name
                - scriptingLanguage
              type: object
              properties:
                workspaceId:
                  type: string
                  format: objectId
                name:
                  maxLength: 64
                  minLength: 3
                  type: string
                tags:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  nullable: true
                scriptingLanguage:
                  $ref: '#/components/schemas/ScriptingLanguage'
                template:
                  maxLength: 256
                  type: string
                  nullable: true
              x-name: CreateProjectRequest
        required: true
      responses:
        '200':
          description: Created project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /project/my/:
    get:
      tags:
        - Project
      summary: Get current user's projects.
      operationId: getCurrentProjects
      responses:
        '200':
          description: List of projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentProjectsResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/project/{projectId}/':
    get:
      tags:
        - Project
      summary: Get project by id.
      operationId: getProject
      responses:
        '200':
          description: Found Project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Project
      summary: Update project with new parameters.
      operationId: updateProject
      requestBody:
        description: Project update information.
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  maxLength: 64
                  minLength: 2
                  type: string
                  nullable: true
                newPictureUrl:
                  type: string
                  nullable: true
                newTags:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  nullable: true
              x-name: UpdateProjectRequest
        required: true
      responses:
        '200':
          description: Updated project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProjectResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - Project
      summary: Delete project and all related data.
      operationId: deleteProject
      responses:
        '204':
          description: Project has been deleted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/branch/':
    put:
      tags:
        - Project
      summary: Create branch in project.
      operationId: createBranch
      requestBody:
        description: Branch creation parameters.
        content:
          application/json:
            schema:
              required:
                - name
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/BranchName'
              x-name: CreateBranchRequest
        required: true
      responses:
        '204':
          description: Branch has been created.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/branch/{branchName}/':
    put:
      tags:
        - Project
      summary: Push branch content into another branch in this project.
      operationId: pushBranch
      requestBody:
        description: Branch push parameters.
        content:
          application/json:
            schema:
              required:
                - destinationBranchName
              type: object
              properties:
                destinationBranchName:
                  $ref: '#/components/schemas/BranchName'
              x-name: PushBranchRequest
        required: true
      responses:
        '204':
          description: Branch has been updated.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Project
      summary: Update branch in project.
      operationId: updateBranch
      requestBody:
        description: Branch update parameters.
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  $ref: '#/components/schemas/BranchName'
                newOrdinal:
                  type: integer
                  format: int32
                  nullable: true
              x-name: UpdateBranchRequest
        required: true
      responses:
        '204':
          description: Branch has been updated.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - Project
      summary: Delete branch in project.
      operationId: deleteBranch
      responses:
        '204':
          description: Branch has been deleted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/branchName'
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/workspace/':
    post:
      tags:
        - Project
      summary: Transfer project form one workspace to another.
      operationId: TransferProject
      requestBody:
        description: Project transfer parameters.
        content:
          application/json:
            schema:
              required:
                - newWorkspaceId
              type: object
              properties:
                newWorkspaceId:
                  type: string
                  format: objectId
              x-name: TransferProjectRequest
        required: true
      responses:
        '204':
          description: Project has been transfered.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/members/':
    put:
      tags:
        - Project
      summary: Invite another user into project.
      operationId: inviteIntoProject
      requestBody:
        description: Invitation parameters.
        content:
          application/json:
            schema:
              required:
                - name
                - email
              type: object
              properties:
                name:
                  maxLength: 128
                  minLength: 2
                  type: string
                email:
                  maxLength: 256
                  minLength: 3
                  pattern: \w+@\w+
                  type: string
              x-name: InviteIntoProjectRequest
        required: true
      responses:
        '204':
          description: Invite has been sent.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - Project
      summary: Expel another user from project.
      operationId: expelFromProject
      parameters:
        - name: memberUserId
          in: query
          description: Member user id.
          required: true
          schema:
            type: string
            format: objectId
      responses:
        '204':
          description: Invite has been sent.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  '/project/{projectId}/permissions/':
    post:
      tags:
        - Project
      summary: Update project permissions.
      operationId: updateProjectPermissions
      requestBody:
        description: Update parameters.
        content:
          application/json:
            schema:
              required:
                - permissions
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProjectPermission'
              x-name: UpdateProjectPermissionsRequest
        required: true
      responses:
        '204':
          description: Project permissions has been updated.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/projectId'
  /membership/packages/:
    get:
      tags:
        - Membership
      summary: Get all membership packages.
      operationId: getMembershipPackages
      responses:
        '200':
          description: List of all membership packages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipPackagesResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/billing/{userId}/account/':
    get:
      tags:
        - Billing
      summary: Get billing account by id.
      operationId: getBillingAccount
      responses:
        '200':
          description: Found billing account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBillingAccountResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Billing
      summary: Update billing information
      operationId: updateBillingAccount
      requestBody:
        description: Billing information parameters.
        content:
          application/json:
            schema:
              required:
                - taxationType
                - firstName
                - lastName
                - addressLine1
                - city
                - countryCode
              type: object
              properties:
                taxationType:
                  $ref: '#/components/schemas/TaxationType'
                firstName:
                  maxLength: 64
                  minLength: 1
                  type: string
                lastName:
                  maxLength: 64
                  minLength: 1
                  type: string
                taxId:
                  maxLength: 128
                  type: string
                  nullable: true
                addressLine1:
                  maxLength: 512
                  minLength: 1
                  type: string
                addressLine2:
                  maxLength: 512
                  type: string
                  nullable: true
                city:
                  maxLength: 128
                  minLength: 1
                  type: string
                countryCode:
                  maxLength: 16
                  minLength: 2
                  type: string
                postalCode:
                  maxLength: 16
                  type: string
                  nullable: true
                state:
                  maxLength: 128
                  type: string
                  nullable: true
              x-name: UpdateBillingAccountRequest
        required: true
      responses:
        '200':
          description: Updated billing account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBillingAccountResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/billing/{userId}/contact-request/':
    post:
      tags:
        - Billing
      summary: Request contact from sales representative.
      operationId: requestContact
      responses:
        '204':
          description: An contact request has been made.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/billing/{userId}/payment/status/':
    get:
      tags:
        - Billing
      summary: Get status of payment for subscription for workspace.
      operationId: getPaymentStatus
      parameters:
        - name: sessionOrInvoiceId
          in: query
          description: Payment session Id or invoice Id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status of payment session or invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentStatusResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    post:
      tags:
        - Billing
      summary: Start subscription session for workspace.
      operationId: startSubscriptionSession
      requestBody:
        description: Payment subject parameters.
        content:
          application/json:
            schema:
              required:
                - workspaceId
                - packageName
                - period
                - currencyCode
                - successRedirectUrl
                - cancelRedirectUrl
              type: object
              properties:
                workspaceId:
                  type: string
                  format: objectId
                packageName:
                  type: string
                period:
                  $ref: '#/components/schemas/BillingPeriod'
                currencyCode:
                  $ref: '#/components/schemas/CurrencyCode'
                successRedirectUrl:
                  maxLength: 256
                  type: string
                cancelRedirectUrl:
                  maxLength: 256
                  type: string
              x-name: StartSubscriptionSessionRequest
        required: true
      responses:
        '200':
          description: Payment action response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartSubscriptionSessionResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/billing/{userId}/payment/':
    post:
      tags:
        - Billing
      summary: Make payment for selected invoice.
      operationId: makePayment
      requestBody:
        description: Make payment parameters.
        content:
          application/json:
            schema:
              required:
                - invoiceId
              type: object
              properties:
                invoiceId:
                  type: string
                  format: objectId
              x-name: MakePaymentRequest
        required: true
      responses:
        '200':
          description: Payment action response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakePaymentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/billing/{userId}/payment/upcoming/':
    post:
      tags:
        - Billing
      summary: Get prorated upcoming payment information.
      operationId: getUpcomingPayment
      requestBody:
        description: Upcoming payment changes parameters.
        content:
          application/json:
            schema:
              required:
                - workspaceId
                - packageName
                - period
                - currencyCode
              type: object
              properties:
                workspaceId:
                  type: string
                  format: objectId
                packageName:
                  type: string
                period:
                  $ref: '#/components/schemas/BillingPeriod'
                currencyCode:
                  $ref: '#/components/schemas/CurrencyCode'
              x-name: UpcomingPaymentParameters
        required: true
      responses:
        '200':
          description: Upcoming payment information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUpcomingPaymentResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  '/billing/{userId}/customer-portal/':
    post:
      tags:
        - Billing
      summary: Get url of customer portal for user if available.
      operationId: getCustomerPortalUrl
      requestBody:
        description: Get url of customer portal parameters.
        content:
          application/json:
            schema:
              required:
                - returnUrl
              type: object
              properties:
                returnUrl:
                  maxLength: 256
                  type: string
              x-name: GetCustomerPortalUrlRequest
        required: true
      responses:
        '200':
          description: Portal url or none.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomerPortalUrlResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/userId'
  /billing/notification/:
    post:
      tags:
        - Billing
      summary: Accept notification from payment gate.
      operationId: paymentNotification
      responses:
        '204':
          description: Notification has been accepted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /search/:
    post:
      tags:
        - Search
      summary: 'Search for users, projects, workspaces by specified keyword.'
      operationId: search
      requestBody:
        description: A search parameters.
        content:
          application/json:
            schema:
              required:
                - keyword
              type: object
              properties:
                keyword:
                  maxLength: 128
                  minLength: 2
                  type: string
                limit:
                  type: integer
                  format: int32
                  nullable: true
                typeFilter:
                  type: array
                  items:
                    $ref: '#/components/schemas/SearchResultItemType'
                  nullable: true
              x-name: SearchRequest
        required: true
      responses:
        '200':
          description: Search result with found search items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  /resourceStorage/:
    put:
      tags:
        - ResourceStorage
      summary: Create resource.
      operationId: createResource
      parameters:
        - name: name
          in: query
          description: Filename or name of resource.
          required: true
          schema:
            minLength: 2
            type: string
        - name: purpose
          in: query
          description: Use purpose of resource.
          required: true
          schema:
            $ref: '#/components/schemas/StoredResourcePurpose'
        - name: mediaType
          in: query
          description: Media type of resource.
          schema:
            minLength: 1
            type: string
            default: application/octet-stream
            nullable: true
      requestBody:
        description: Binary data of resource.
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Blob'
        required: true
      responses:
        '200':
          description: Created resource id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
  '/resourceStorage/{resourceId}/':
    get:
      tags:
        - ResourceStorage
      summary: Get resource metadata by id.
      operationId: getResourceMetadata
      responses:
        '200':
          description: Found resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceMetadataResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    delete:
      tags:
        - ResourceStorage
      summary: Delete resource by id.
      operationId: deleteResource
      responses:
        '204':
          description: Resource has been deleted.
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - BearerAuth: [ ]
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/resourceStorage/{resourceId}/data/':
    get:
      tags:
        - ResourceStorage
      summary: Get resource binary data by id.
      operationId: getResource
      responses:
        '200':
          description: Found resource.
          content:
            application/octet-stream:
              schema:
                type: object
      x-custom-response: true
      x-anonymous: true
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /context/:
    get:
      tags:
        - Context
      summary: Get page context.
      operationId: getContext
      parameters:
        - name: projectName
          in: query
          description: Project name of current page.
          schema:
            type: string
            nullable: true
        - name: branchName
          in: query
          description: Branch name of current page.
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Page's context related properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContextResponse'
        default:
          description: Operation failure response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-anonymous: true
  /notification/:
    get:
      tags:
        - Notifications
      summary: 'Subscribe on notifications from server. This is WebSocket endpoint, any non ''Upgrade'' requests will fail.'
      operationId: subscribeOnNotifications
      responses:
        '101':
          description: WebSocket upgrade were sucessful.
      security:
        - BearerAuth: [ ]
      x-custom-response: true
components:
  schemas:
    PasswordString:
      maxLength: 256
      minLength: 6
      type: string
      format: password
    Filter:
      required:
        - property
        - operator
        - value
        - caseSensitive
      type: object
      properties:
        property:
          type: string
          description: Name of property to filter.
        operator:
          enum:
            - greaterThan
            - greaterThanOrEqual
            - lessThan
            - lessThanOrEqual
            - equal
            - notEqual
            - like
            - in
          type: string
        value:
          $ref: '#/components/schemas/JsonValue'
        caseSensitive:
          type: boolean
      additionalProperties: false
      description: Description of document filtering conditions.
      nullable: true
      readOnly: true
    Sorter:
      required:
        - property
        - direction
      type: object
      properties:
        property:
          type: string
          description: Name of property to filter.
        direction:
          enum:
            - ascending
            - descending
          type: string
      additionalProperties: false
      description: Description of document sorting option.
      readOnly: true
    GameDataDocument:
      type: object
      description: Collections of documents by schema name.
      x-external-type: GameDataDocument
    DataDocument:
      type: object
      x-external-type: DataDocument
    DataDocumentValue:
      x-external-type: DataDocumentValue
    NullableDataDocument:
      type: object
      nullable: true
      x-external-type: DataDocument
    JsonObject:
      type: object
      nullable: true
      x-external-type: JsonObject
    JsonValue:
      x-external-type: JsonValue
    BulkChangeResult:
      required:
        - changes
        - metadataHash
        - revisionHash
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/BulkChangeRecord'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    StatisticsResult:
      required:
        - metadataHash
        - revisionHash
        - collections
      type: object
      properties:
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/DocumentsStatisticsRecord'
      additionalProperties: false
      readOnly: true
    DocumentsStatisticsRecord:
      required:
        - schemaName
        - schemaId
        - documentCount
        - rootDocumentCount
        - validationErrorCount
      type: object
      properties:
        schemaName:
          type: string
          description: Name of relevant schema.
          readOnly: true
        schemaId:
          type: string
          description: Identitifer of relevant schema.
          readOnly: true
        documentCount:
          type: integer
          description: Number of all documents.
          format: int32
          readOnly: true
        rootDocumentCount:
          type: integer
          description: Number of root documents.
          format: int32
          readOnly: true
        validationErrorCount:
          type: object
          additionalProperties:
            type: integer
            description: Number of documents containing errors.
            format: int32
            readOnly: true
          readOnly: true
      additionalProperties: false
      description: Statistics of documents for some schema.
      readOnly: true
    BulkChangeRecord:
      required:
        - id
        - newId
        - schemaName
        - schemaId
        - status
        - comment
        - errors
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DataDocumentValue'
        newId:
          $ref: '#/components/schemas/DataDocumentValue'
        schemaName:
          type: string
        schemaId:
          type: string
        status:
          enum:
            - created
            - updated
            - deleted
            - skipped
            - unchanged
            - error
          type: string
        comment:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      additionalProperties: false
      readOnly: true
    ValidationError:
      required:
        - path
        - message
        - code
      type: object
      properties:
        path:
          type: string
        message:
          type: string
        code:
          $ref: '#/components/schemas/ErrorCode'
      readOnly: true
    ValidateResult:
      required:
        - records
        - metadataHash
        - revisionHash
      type: object
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRecord'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    ValidationRecord:
      required:
        - id
        - schemaName
        - schemaId
        - errors
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DataDocumentValue'
        schemaName:
          type: string
        schemaId:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      additionalProperties: false
      readOnly: true
    DataDocumentMeta:
      required:
        - schemaId
        - path
        - containingDocumentSchemaId
        - containingDocumentId
        - errorCount
      type: object
      properties:
        schemaId:
          type: string
        path:
          type: string
          nullable: true
        containingDocumentSchemaId:
          type: string
          nullable: true
        containingDocumentId:
          type: string
          nullable: true
        errorCount:
          type: integer
          format: int32
      additionalProperties: false
      readOnly: true
    ValidationOption:
      enum:
        - repair
        - checkTranslation
        - deduplicateIds
        - repairRequiredWithDefaultValue
        - eraseInvalidValue
        - checkRequirements
        - checkFormat
        - checkUniqueness
        - checkReferences
        - checkSpecification
        - checkConstraints
      type: string
    ImportMode:
      enum:
        - createAndUpdate
        - create
        - update
        - safeUpdate
        - replace
        - delete
      type: string
    ExportMode:
      enum:
        - normal
        - publication
        - localization
        - extraction
      type: string
    TranslationMode:
      enum:
        - all
        - staleAndMissing
        - onlyMissing
      type: string
    ExportResult:
      required:
        - document
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/GameDataDocument'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    BackupResult:
      required:
        - document
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/GameDataDocument'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    CreateResult:
      required:
        - document
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/DataDocument'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    UpdateResult:
      required:
        - document
        - diff
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/DataDocument'
        diff:
          $ref: '#/components/schemas/DataDocument'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    DeleteResult:
      required:
        - document
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/DataDocument'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    FindResult:
      required:
        - document
        - meta
        - metadataHash
        - revisionHash
      type: object
      properties:
        document:
          $ref: '#/components/schemas/NullableDataDocument'
        meta:
          $ref: '#/components/schemas/DataDocumentMeta'
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    ListResult:
      required:
        - documents
        - metas
        - total
        - metadataHash
        - revisionHash
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DataDocument'
        metas:
          type: array
          items:
            $ref: '#/components/schemas/DataDocumentMeta'
        total:
          type: integer
          format: int32
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    RestoreResult:
      required:
        - metadataHash
        - revisionHash
      type: object
      properties:
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      readOnly: true
    SearchResult:
      required:
        - items
        - total
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchResultItem'
        total:
          type: integer
          format: int32
      additionalProperties: false
      readOnly: true
    SearchResultItem:
      required:
        - type
        - id
        - subId
        - displayText
        - subDisplayText
        - pictureUrl
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SearchResultItemType'
        id:
          type: string
        subId:
          type: string
          nullable: true
        displayText:
          type: string
        subDisplayText:
          type: string
        pictureUrl:
          type: string
          nullable: true
      additionalProperties: false
      readOnly: true
    SearchResultItemType:
      enum:
        - user
        - project
        - workspace
        - schema
        - document
      type: string
    AiCompletionResult:
      required:
        - id
        - threadId
        - messages
        - completionTokens
        - promptTokens
        - totalTokens
        - tokensLeft
      type: object
      properties:
        id:
          type: string
        threadId:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/AiChatMessage'
        completionTokens:
          type: integer
          format: int32
          nullable: true
        promptTokens:
          type: integer
          format: int32
          nullable: true
        totalTokens:
          type: integer
          format: int32
          nullable: true
        tokensLeft:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
      readOnly: true
    AiChatMessage:
      required:
        - role
        - content
      type: object
      properties:
        role:
          enum:
            - user
            - assistant
            - system
          type: string
        content:
          type: string
        name:
          type: string
          nullable: true
      additionalProperties: false
      readOnly: true
    ExtensionPackageLoadProgress:
      required:
        - status
        - progressMessage
        - lastStatusUpdate
      type: object
      properties:
        status:
          enum:
            - packageIsNotDeclared
            - retrievingMetadata
            - packageNotFound
            - noCompatibleVersionFound
            - downloadingPackage
            - packageDownloadFailed
            - packageIsTooBig
            - unpackingPackage
            - packageUnpackFailed
            - loaded
          type: string
        progressMessage:
          type: string
          nullable: true
        lastStatusUpdate:
          type: string
          format: date-time
      additionalProperties: false
      readOnly: true
    PageContext:
      required:
        - scope
        - serverCapabilities
        - userId
        - workspaceId
        - workspaceCapabilities
        - projectId
        - dataSourceId
        - dataSourceLocation
        - preferences
      type: object
      properties:
        scope:
          enum:
            - server
            - user
            - dataSource
          type: string
        serverCapabilities:
          $ref: '#/components/schemas/ServerCapabilities'
        userId:
          type: string
          format: objectId
          nullable: true
        workspaceId:
          type: string
          format: objectId
          nullable: true
        workspaceCapabilities:
          $ref: '#/components/schemas/WorkspaceCapabilities'
        projectId:
          type: string
          format: objectId
          nullable: true
        dataSourceId:
          type: string
          format: objectId
          nullable: true
        dataSourceLocation:
          type: string
          nullable: true
        preferences:
          required:
            - projectPersonal
            - projectShared
            - workspacePersonal
            - workspaceShared
            - serverDefault
          type: object
          properties:
            projectPersonal:
              $ref: '#/components/schemas/JsonObject'
            projectShared:
              $ref: '#/components/schemas/JsonObject'
            workspacePersonal:
              $ref: '#/components/schemas/JsonObject'
            workspaceShared:
              $ref: '#/components/schemas/JsonObject'
            serverDefault:
              $ref: '#/components/schemas/JsonObject'
          x-name: PreferencesByLayer
      additionalProperties: false
      readOnly: true
    DataSourceCapabilities:
      required:
        - location
        - limits
      type: object
      properties:
        location:
          type: string
        limits:
          required:
            - transactionMaxStartTime
            - transactionMaxExecutionTime
            - readOnly
            - readOnlyReasons
          type: object
          properties:
            transactionMaxStartTime:
              type: string
              format: time
            transactionMaxExecutionTime:
              type: string
              format: time
            readOnly:
              type: boolean
            readOnlyReasons:
              type: array
              items:
                $ref: '#/components/schemas/DataSourceReadOnlyReason'
      additionalProperties: false
      readOnly: true
    DataSourceReadOnlyReason:
      enum:
        - protectedDocument
        - fileIsReadOnly
        - noEditPermission
        - tooManyMembers
        - tooManyProjects
        - storageExhausted
      type: string
    BranchName:
      maxLength: 64
      minLength: 2
      pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$'
      type: string
    ServerCapabilities:
      required:
        - serverVersion
        - features
      type: object
      properties:
        serverVersion:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/ServerFeature'
      additionalProperties: false
      readOnly: true
    WorkspaceCapabilities:
      required:
        - features
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/ServerFeature'
      additionalProperties: false
      nullable: true
      readOnly: true
    ServerFeature:
      enum:
        - none
        - authentication
        - remoteLogging
        - termsOfService
        - privacyPolicy
        - projectSelection
        - projectDelete
        - projectTransfer
        - projectMembers
        - projectBranches
        - projectPermissions
        - projectCustomization
        - gameAssets
        - uiExtensions
        - userDelete
        - revokeTokens
        - billing
        - aiCompletion
        - machineTranslation
        - apiKeys
        - googleAuthentication
        - microsoftAuthentication
        - githubAuthentication
      type: string
    ProcessState:
      required:
        - id
        - dataSourceId
        - type
        - status
        - progressMessage
        - progress
        - startTime
        - elapsedMilliseconds
        - canBeStopped
      type: object
      properties:
        id:
          type: integer
          format: int32
        dataSourceId:
          type: string
          format: objectId
        type:
          $ref: '#/components/schemas/ProcessType'
        initiatorName:
          type: string
          nullable: true
        initiatorId:
          type: string
          format: objectId
          nullable: true
        status:
          $ref: '#/components/schemas/ProcessWorkflowStatus'
        progressMessage:
          type: string
        progress:
          type: number
          format: float
        startTime:
          type: string
          format: date-time
        elapsedMilliseconds:
          type: number
          format: float
        canBeStopped:
          type: boolean
      additionalProperties: false
      readOnly: true
    ProcessType:
      enum:
        - load
        - validate
        - import
        - export
        - backup
        - restore
        - generateSourceCode
        - translate
      type: string
    ProcessWorkflowStatus:
      enum:
        - unknown
        - running
        - stopped
        - faulted
        - finished
        - finishedWithResult
      type: string
    FormulaType:
      required:
        - sourceCodeLanguage
        - kind
        - name
        - packageOrNamespaceName
        - fullName
        - moduleName
      type: object
      properties:
        sourceCodeLanguage:
          $ref: '#/components/schemas/TargetSourceCodeLanguage'
        kind:
          enum:
            - class
            - enum
            - interface
            - structure
            - delegate
          type: string
        name:
          type: string
        packageOrNamespaceName:
          type: string
        fullName:
          type: string
        moduleName:
          type: string
      additionalProperties: false
      readOnly: true
    GameAsset:
      required:
        - name
        - hasThumbnail
        - type
        - path
      type: object
      properties:
        name:
          type: string
          description: Display name of the asset
        hasThumbnail:
          type: boolean
          description: Whether the asset has an available thumbnail
        thumbnailHash:
          type: string
          description: Hash value of thumbnail. If available
          nullable: true
        type:
          type: string
          description: Type/category of the asset
        path:
          type: string
          description: Project-relative path to the asset
      description: A game asset that can be referenced from game data
    PublicUserProfile:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: objectid
        name:
          type: string
        pictureUrl:
          type: string
          nullable: true
      additionalProperties: false
    User:
      required:
        - id
        - type
        - profile
        - logins
        - invitations
        - workspaces
        - workspaceAliases
        - projectAliases
        - creationTime
      type: object
      properties:
        id:
          type: string
          format: objectid
        type:
          enum:
            - personalAccount
            - businessAccount
            - administratorAccount
          type: string
          x-name: UserAccountType
        profile:
          required:
            - name
            - email
          type: object
          properties:
            name:
              type: string
            pictureUrl:
              type: string
              nullable: true
            email:
              type: string
            verifiedEmail:
              type: string
              nullable: true
        logins:
          type: array
          items:
            $ref: '#/components/schemas/UserLogin'
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMembershipInvitation'
        workspaces:
          type: array
          items:
            type: string
            format: objectid
        workspaceAliases:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceAlias'
        projectAliases:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAlias'
        creationTime:
          type: string
          format: date-time
    WorkspaceAlias:
      required:
        - workspaceId
        - alias
        - creationTime
      properties:
        workspaceId:
          type: string
          format: objectid
        alias:
          type: string
        creationTime:
          type: string
          format: date-time
    ProjectAlias:
      required:
        - projectId
        - alias
        - creationTime
      properties:
        projectId:
          type: string
          format: objectid
        alias:
          type: string
        creationTime:
          type: string
          format: date-time
    UserLogin:
      required:
        - id
        - isEnabled
        - tokenSeries
        - provider
      properties:
        id:
          type: string
        isEnabled:
          type: boolean
        tokenSeries:
          type: string
          format: objectid
        provider:
          $ref: '#/components/schemas/AuthenticationProvider'
    CreatedApiKey:
      required:
        - userLogin
        - apiKey
      properties:
        userLogin:
          $ref: '#/components/schemas/UserLogin'
        apiKey:
          type: string
    TargetSourceCodeLanguage:
      enum:
        - cSharp40
        - cSharp73
        - typeScript
        - ueCpp
        - haxe
      type: string
      x-name: SourceCodeTargetLanguage
    PresenceInfo:
      required:
        - sessionId
        - page
        - routeParameters
      type: object
      properties:
        sessionId:
          $ref: '#/components/schemas/BrowserSessionId'
        page:
          enum:
            - gone
            - dashboard
            - documentForm
            - documentCollection
          type: string
          x-name: UserPresencePage
        routeParameters:
          type: object
        focusedObject:
          type: object
          nullable: true
    BrowserSessionId:
      type: integer
      description: Unique identifier of User's browser session.
      format: int32
    AuthenticationProvider:
      enum:
        - emailPassword
        - emailTotpCode
        - apiKey
        - google
        - microsoft
        - github
      type: string
    ProjectMembershipInvitation:
      required:
        - id
        - invitedUserId
        - initiatorUserId
        - projectId
        - response
        - creationTime
      type: object
      properties:
        id:
          type: string
          format: objectid
        invitedUserId:
          type: string
          format: objectid
        initiatorUserId:
          type: string
          format: objectid
        projectId:
          type: string
          format: objectid
        response:
          enum:
            - sent
            - emailSent
            - declined
          type: string
        creationTime:
          type: string
          format: date-time
    Workspace:
      required:
        - id
        - name
        - pictureUrl
        - ownerUserId
        - subscription
        - administratorUserIds
        - projects
      type: object
      properties:
        id:
          type: string
          format: objectid
        name:
          type: string
        pictureUrl:
          type: string
          nullable: true
        ownerUserId:
          type: string
          format: objectid
        subscription:
          $ref: '#/components/schemas/MembershipSubscription'
        administratorUserIds:
          type: array
          items:
            type: string
            format: objectid
        projects:
          type: array
          items:
            type: string
            format: objectid
    WorkspaceQuotaUsage:
      required:
        - memberCount
        - projectCount
        - dataStorageSize
        - backupStorageSize
        - machineTranslationTokens
        - aiCompletionTokens
      type: object
      properties:
        memberCount:
          type: integer
          format: int32
        projectCount:
          type: integer
          format: int32
        dataStorageSize:
          type: integer
          format: int32
        backupStorageSize:
          type: integer
          format: int32
        machineTranslationTokens:
          type: integer
          format: int32
        aiCompletionTokens:
          type: integer
          format: int32
    Project:
      required:
        - id
        - name
        - pictureUrl
        - tags
        - scriptingLanguage
        - workspaceId
        - branches
        - memberUserIds
        - invitations
        - permissions
      type: object
      properties:
        id:
          type: string
          format: objectid
        name:
          type: string
        pictureUrl:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        scriptingLanguage:
          $ref: '#/components/schemas/ScriptingLanguage'
        workspaceId:
          type: string
          format: objectid
        branches:
          type: array
          items:
            $ref: '#/components/schemas/Branch'
        memberUserIds:
          type: array
          items:
            type: string
            format: objectid
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMembershipInvitation'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPermission'
    ScriptingLanguage:
      enum:
        - cSharp
        - cSharpUnity
        - cpp
        - cppUnrealEngine
        - haxe
        - typeScript
        - other
      type: string
    Branch:
      required:
        - id
        - name
        - isPrimary
        - databaseName
        - location
        - dataSize
        - backupSize
      type: object
      properties:
        id:
          type: string
          format: objectid
        name:
          type: string
        isPrimary:
          type: boolean
        databaseName:
          type: string
        location:
          enum:
            - fileSystem
            - mongoGridFs
            - mongoCollection
            - mongoDataBase
          type: string
        dataSize:
          type: integer
          format: int32
        backupSize:
          type: integer
          format: int32
    ProjectPermission:
      required:
        - memberUserId
        - grants
      type: object
      properties:
        memberUserId:
          type: string
          format: objectid
        grants:
          type: array
          items:
            enum:
              - view
              - edit
              - design
              - administer
            type: string
            x-name: ProjectPermissionGrant
    BillingAccount:
      required:
        - id
        - taxationType
        - firstName
        - lastName
        - addressLine1
        - city
        - countryCode
        - balance
        - invoices
      type: object
      properties:
        id:
          type: string
          format: objectid
        externalId:
          type: string
          nullable: true
        taxationType:
          $ref: '#/components/schemas/TaxationType'
        firstName:
          type: string
        lastName:
          type: string
        taxId:
          type: string
          nullable: true
        addressLine1:
          type: string
        addressLine2:
          type: string
          nullable: true
        city:
          type: string
        countryCode:
          type: string
        postalCode:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        balance:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyAmount'
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/PaymentInvoice'
    PaymentInvoice:
      required:
        - id
        - creationTime
        - description
        - lines
        - currencyCode
        - totalAmount
        - lastUpdateTime
        - status
      type: object
      properties:
        id:
          type: string
          format: objectid
        externalId:
          type: string
          nullable: true
        creationTime:
          type: string
          format: date-time
        description:
          type: string
        hostedUrl:
          type: string
          nullable: true
        lines:
          type: array
          items:
            $ref: '#/components/schemas/PaymentInvoiceLineItem'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        totalAmount:
          type: integer
          format: int32
        lastUpdateTime:
          type: string
          format: date-time
        lastPaymentError:
          type: string
          nullable: true
        status:
          enum:
            - draft
            - open
            - paid
            - uncollectible
            - void
          type: string
    PaymentInvoiceLineItem:
      required:
        - description
        - currencyCode
        - amount
      type: object
      properties:
        description:
          type: string
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        amount:
          type: integer
          format: int32
    TaxationType:
      enum:
        - private
        - business
      type: string
    RedirectResult:
      required:
        - redirectAction
        - redirectUrl
      type: object
      properties:
        redirectAction:
          enum:
            - none
            - get
            - post
          type: string
          x-name: RedirectAction
        redirectUrl:
          type: string
          nullable: true
      x-mutable: true
    MembershipPackage:
      required:
        - name
        - title
        - features
        - prices
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
          nullable: true
        title:
          type: string
        features:
          required:
            - backup
            - projects
            - storage
            - serviceTokens
          type: object
          properties:
            backup:
              required:
                - allowSchedule
              type: object
              properties:
                allowSchedule:
                  type: boolean
            projects:
              required:
                - maxMembers
                - maxProjects
              type: object
              properties:
                maxMembers:
                  type: integer
                  format: int32
                  nullable: true
                maxProjects:
                  type: integer
                  format: int32
                  nullable: true
              nullable: true
            storage:
              required:
                - dataSource
                - backups
              type: object
              properties:
                dataSource:
                  type: integer
                  format: int32
                  nullable: true
                backups:
                  type: integer
                  format: int32
                  nullable: true
              nullable: true
            serviceTokens:
              required:
                - machineTranslation
                - aiCompletion
              type: object
              properties:
                machineTranslation:
                  type: integer
                  format: int32
                  nullable: true
                aiCompletion:
                  type: integer
                  format: int32
                  nullable: true
              nullable: true
        prices:
          type: array
          items:
            $ref: '#/components/schemas/MembershipPrice'
    MembershipSubscription:
      required:
        - id
        - packageName
        - startDate
        - endDate
        - usedResources
        - cost
      type: object
      properties:
        id:
          type: string
          format: objectid
        externalId:
          type: string
          nullable: true
        packageName:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
        usedResources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceUsage'
        cost:
          $ref: '#/components/schemas/MembershipPrice'
    ResourceUsage:
      required:
        - type
        - amount
        - amountTotal
        - startDate
        - lastUpdateDate
        - lastRollDate
      type: object
      properties:
        type:
          enum:
            - aiCompletionToken
            - machineTranslationToken
          type: string
          x-name: ResourceAllowanceType
        amount:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        lastUpdateDate:
          type: string
          format: date
        lastRollDate:
          type: string
          format: date
    MembershipPrice:
      required:
        - externalId
        - period
        - currencyCode
        - amount
      type: object
      properties:
        externalId:
          type: string
          nullable: true
        period:
          $ref: '#/components/schemas/BillingPeriod'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        amount:
          type: integer
          format: int32
    CurrencyAmount:
      required:
        - currencyCode
        - amount
      type: object
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        amount:
          type: integer
          format: int32
    BillingPeriod:
      enum:
        - monthly
        - yearly
      type: string
    CurrencyCode:
      enum:
        - usd
      type: string
    OAuthSuccessResponse:
      required:
        - token_type
        - access_token
        - refresh_token
        - expires_in
        - user_id
      type: object
      properties:
        token_type:
          enum:
            - bearer
          type: string
          description: The type of the token issued.  Value is case insensitive.
          readOnly: true
        access_token:
          type: string
          description: The access token issued by the authorization server.
          readOnly: true
        refresh_token:
          type: string
          description: 'The refresh token, which can be used to obtain new access tokens using the same authorization grant.'
          readOnly: true
        expires_in:
          type: integer
          description: The lifetime in seconds of the access token.
          format: int32
          readOnly: true
        user_id:
          type: string
          description: Id of authenticated user.
          format: objectId
          readOnly: true
      additionalProperties: false
    AuthenticationFlowStage:
      required:
        - flowId
        - authorizationCode
        - nextStep
      type: object
      properties:
        flowId:
          type: string
          format: objectId
          readOnly: true
        authorizationCode:
          type: string
          nullable: true
          readOnly: true
        nextStep:
          enum:
            - emailTotpCode
          type: string
          nullable: true
          x-name: MultiFactorAuthenticationStep
      additionalProperties: false
    AuthenticationRedirect:
      required:
        - location
      type: object
      properties:
        location:
          type: string
      additionalProperties: false
    Blob:
      type: string
      format: binary
    StoredResourceMetadata:
      required:
        - id
        - ownerId
        - fileName
        - purpose
        - length
        - mediaType
        - md5Hash
      type: object
      properties:
        id:
          type: string
          description: Id of resource.
          format: objectId
          readOnly: true
        ownerId:
          type: string
          description: User id of the owner of resource.
          format: objectId
          nullable: true
          readOnly: true
        fileName:
          type: string
          description: Name of resource file.
          readOnly: true
        purpose:
          $ref: '#/components/schemas/StoredResourcePurpose'
        length:
          type: integer
          description: Length of resource file.
          format: int32
          readOnly: true
        mediaType:
          type: string
          description: Media type of resource.
          readOnly: true
        md5Hash:
          type: string
          description: MD5 hash of resource.
          readOnly: true
    StoredResourcePurpose:
      enum:
        - unspecified
        - userPicture
        - projectPicture
        - workspacePicture
      type: string
    ChangeWorkspaceSubscriptionRequest:
      required:
        - packageName
        - billingPeriod
        - billingCurrencyCode
      type: object
      properties:
        packageName:
          maxLength: 64
          minLength: 2
          type: string
        billingPeriod:
          $ref: '#/components/schemas/BillingPeriod'
        billingCurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
      additionalProperties: false
    JsonPatches:
      type: array
      items:
        $ref: '#/components/schemas/JsonPatch'
    JsonPatch:
      required:
        - path
        - op
      type: object
      properties:
        path:
          $ref: '#/components/schemas/JsonPointer'
        op:
          $ref: '#/components/schemas/JsonPatchOperation'
        value:
          $ref: '#/components/schemas/JsonValue'
        from:
          $ref: '#/components/schemas/JsonPointer'
    JsonPointer:
      type: string
      description: A path to a value.
      nullable: true
    JsonPatchOperation:
      enum:
        - add
        - replace
        - test
        - remove
        - move
        - copy
      type: string
    MetadataHash:
      maxLength: 8
      minLength: 8
      pattern: '^[0-9a-fA-F]+$'
      type: string
    RevisionHash:
      maxLength: 32
      minLength: 24
      pattern: '^[0-9a-fA-F]+$'
      type: string
    RawResponse:
      type: object
    ErrorResponse:
      required:
        - result
        - errors
      type: object
      properties:
        result:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
      additionalProperties: false
      readOnly: true
      x-external-type: ErrorResponse
    EmptyResponse:
      required:
        - result
        - errors
      type: object
      properties:
        result:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
      additionalProperties: false
      readOnly: true
      x-external-type: EmptyResponse
    ApiError:
      required:
        - message
        - code
      type: object
      properties:
        message:
          type: string
        code:
          $ref: '#/components/schemas/ErrorCode'
      x-external-type: ApiError
    ErrorCode:
      enum:
        - error
        - notFound
        - serviceUnavailable
        - tooManyRequests
        - notSupported
        - authenticationFailed
        - authorizationFailed
        - readOnly
        - invalidRequestBodyFormat
        - parameterValueIsInvalid
        - parameterValueIsRequired
        - parameterValuePatternDoesntMatch
        - parameterMinValueOverflow
        - parameterMinValueInclusiveOverflow
        - parameterMaxValueOverflow
        - parameterMaxValueInclusiveOverflow
        - parameterValueMinLengthOverflow
        - parameterValueMaxLengthOverflow
        - parameterValueMinSizeOverflow
        - parameterValueMaxSizeOverflow
        - parameterValueItemsDuplicate
        - invalidImportData
        - jsonPatchInvalidParameter
        - jsonPatchTestFailed
        - jsonPatchForbiddenOperation
        - deletingReferencedSchema
        - documentIsProtected
        - documentIsNotRoot
        - transactionAborted
        - transactionAlreadyCompleted
        - transactionAlreadyExists
        - transactionDoesNotExists
        - metadataLoadError
        - invalidTimeFormat
        - invalidDateFormat
        - invalidLocalizedTextFormat
        - invalidTextFormat
        - invalidLogicalFormat
        - invalidNumberFormat
        - invalidIntegerFormat
        - invalidPickListFormat
        - invalidMultiPickListFormat
        - invalidDocumentFormat
        - invalidDocumentCollectionFormat
        - invalidReferenceFormat
        - invalidReferenceCollectionFormat
        - invalidFormulaFormat
        - valueIsNull
        - valueIsEmpty
        - valueOverflow
        - valueLengthExceeded
        - collectionSizeExceeded
        - brokenReference
        - missingTranslation
        - uniqueValueDuplication
        - invalidIdFormat
        - invalidGeneratedIdFormat
        - componentsInRootCollection
        - missingSettingsDocument
        - moreThanOneSettingsDocument
        - invalidNameFormat
        - reservedName
        - invalidSize
        - invalidLanguage
        - referenceTypeCauseRecursion
        - invalidIdDataType
        - invalidDataTypeChange
        - invalidIdGeneratorChange
        - invalidRequirementForDataType
        - invalidIconFormat
        - invalidDisplayTextTemplateFormat
        - invalidPickName
        - duplicatePickName
        - invalidPickValue
        - invalidParameterName
        - duplicateParameterName
        - invalidTypeName
        - invalidTypeReference
        - invalidPrecision
        - invalidRowCount
        - duplicateSpecificationKey
        - emailIsAlreadyTaken
        - aiCompletionFailed
        - billingFailed
        - aiCompletionTokenLimitReached
        - machineTranslationTokenLimitReached
        - invalidSchema
        - invalidSchemaProperty
      type: string
    Preferences:
      required:
        - dataSource
        - authentication
      type: object
      properties:
        dataSource:
          $ref: '#/components/schemas/DataSourcePreferences'
        authentication:
          $ref: '#/components/schemas/AuthenticationPreferences'
      nullable: true
      x-mutable: true
    AuthenticationPreferences:
      required:
        - refreshTokens
      type: object
      properties:
        currentUserId:
          type: string
          nullable: true
        refreshTokens:
          type: object
          additionalProperties:
            type: string
      x-mutable: true
    DataSourcePreferences:
      required:
        - documentForm
        - documentList
        - dashboard
        - features
        - recentDocuments
        - wizard
        - mutedWarnings
      type: object
      properties:
        documentForm:
          $ref: '#/components/schemas/DocumentFormPreferences'
        documentList:
          $ref: '#/components/schemas/DocumentListPreferences'
        dashboard:
          $ref: '#/components/schemas/DashboardPreferences'
        features:
          type: object
          additionalProperties:
            type: object
        recentDocuments:
          type: object
          additionalProperties:
            type: object
        wizard:
          type: object
          additionalProperties:
            type: object
        mutedWarnings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MutedWarningPreference'
      x-mutable: true
    DocumentFormPreferences:
      required:
        - documentDrafts
      type: object
      properties:
        savingWithErrorsPolicy:
          $ref: '#/components/schemas/DialogActionPreference'
        deletingMultipleDocumentsPolicy:
          $ref: '#/components/schemas/DialogActionPreference'
        selectedLanguageId:
          type: string
          nullable: true
        designMode:
          enum:
            - basic
            - advanced
          type: string
          x-name: DesignModePreference
        documentDrafts:
          type: object
          additionalProperties:
            type: object
      x-mutable: true
    DocumentListPreferences:
      required:
        - views
        - selectedViews
      type: object
      properties:
        views:
          type: object
          additionalProperties:
            type: object
        selectedViews:
          type: object
          additionalProperties:
            type: string
      x-mutable: true
    DashboardPreferences:
      type: object
      properties:
        sidePanelWidth:
          type: number
          nullable: true
        lastReleaseNotesHash:
          type: string
          nullable: true
        lastActivityDate:
          type: string
          format: date-time
          nullable: true
        activityDateCount:
          type: number
          format: int32
          nullable: true
        dialogPostponementDate:
          type: string
          format: date-time
          nullable: true
      x-mutable: true
    DialogActionPreference:
      enum:
        - ask
        - continue
        - abort
      type: string
    MutedWarningPreference:
      type: object
      properties:
        name:
          type: string
        muteDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
          nullable: true
      x-mutable: true
    ProcessStartedNotification:
      required:
        - dataSourceId
        - processId
        - type
        - startTime
        - canBeStopped
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        processId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/ProcessType'
        startTime:
          type: string
          format: date-time
        canBeStopped:
          type: boolean
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    ProcessProgressChangedNotification:
      required:
        - dataSourceId
        - processId
        - type
        - progressMessage
        - progress
        - elapsedMilliseconds
        - canBeStopped
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        processId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/ProcessType'
        progressMessage:
          type: string
        progress:
          type: number
          format: float
        elapsedMilliseconds:
          type: number
          format: float
        canBeStopped:
          type: boolean
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    ProcessFinishedNotification:
      required:
        - dataSourceId
        - processId
        - metadataHash
        - type
        - status
        - elapsedMilliseconds
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        processId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/ProcessType'
        status:
          $ref: '#/components/schemas/ProcessWorkflowStatus'
        elapsedMilliseconds:
          type: number
          format: float
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DocumentCollectionChangedNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
        - schemaId
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
        schemaId:
          type: string
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceRestoredNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceLoadedNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceReloadStartedNotification:
      required:
        - dataSourceId
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceReloadedNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceReloadFailedNotification:
      required:
        - dataSourceId
        - errors
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceSavingNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceSavedNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceSaveFailedNotification:
      required:
        - dataSourceId
        - metadataHash
        - revisionHash
        - failTime
        - errors
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        metadataHash:
          $ref: '#/components/schemas/MetadataHash'
        revisionHash:
          $ref: '#/components/schemas/RevisionHash'
        failTime:
          type: string
          format: date-time
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    DataSourceUnloadedNotification:
      required:
        - dataSourceId
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    UserDeletedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: INotificationContent
    UserPasswordChangedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IUserNotificationContent
    ProjectCreatedNotification:
      required:
        - userId
        - workspaceId
        - projectId
      type: object
      properties:
        userId:
          type: string
          format: objectId
        workspaceId:
          type: string
          format: objectId
        projectId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IWorkspaceNotificationContent
    ProjectDeletedNotification:
      required:
        - workspaceId
        - projectId
      type: object
      properties:
        workspaceId:
          type: string
          format: objectId
        projectId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IProjectNotificationContent
    ProjectChangedNotification:
      required:
        - workspaceId
        - projectId
      type: object
      properties:
        workspaceId:
          type: string
          format: objectId
        projectId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IProjectNotificationContent
    BranchCreatedNotification:
      required:
        - userId
        - workspaceId
        - projectId
        - dataSourceId
        - branchName
      type: object
      properties:
        userId:
          type: string
          format: objectId
        workspaceId:
          type: string
          format: objectId
        projectId:
          type: string
          format: objectId
        dataSourceId:
          type: string
          format: objectId
        branchName:
          type: string
      additionalProperties: false
      x-implements: IProjectNotificationContent
    UserCreatedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IUserNotificationContent
    UserChangedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IUserNotificationContent
    UserEmailConfirmedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IUserNotificationContent
    BillingAccountChangedNotification:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IUserNotificationContent
    BillingAccountBalanceChangedNotification:
      required:
        - userId
        - oldAmount
        - newAmount
      type: object
      properties:
        userId:
          type: string
          format: objectId
        oldAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        newAmount:
          $ref: '#/components/schemas/CurrencyAmount'
      additionalProperties: false
      x-implements: IUserNotificationContent
    WorkspaceCreatedNotification:
      required:
        - userId
        - workspaceId
      type: object
      properties:
        userId:
          type: string
          format: objectId
        workspaceId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IWorkspaceNotificationContent
    WorkspaceChangedNotification:
      required:
        - workspaceId
      type: object
      properties:
        workspaceId:
          type: string
          format: objectId
      additionalProperties: false
      x-implements: IWorkspaceNotificationContent
    SubscribeToDataSourceEventsRequest:
      required:
        - dataSourceId
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
          nullable: true
      additionalProperties: false
      x-implements: INotificationContent
    UserPresenceChangedNotification:
      required:
        - dataSourceId
        - presence
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
        presence:
          $ref: '#/components/schemas/PresenceInfo'
      additionalProperties: false
      x-implements: IDataSourceNotificationContent
    UpdateUserPresenceRequest:
      required:
        - presence
      type: object
      properties:
        presence:
          $ref: '#/components/schemas/PresenceInfo'
      additionalProperties: false
      x-implements: INotificationContent
    DataSourceNotificationSubscriptionChanged:
      required:
        - dataSourceId
      type: object
      properties:
        dataSourceId:
          type: string
          format: objectId
          nullable: true
      additionalProperties: false
      x-implements: INotificationContent
    ServerShutdownNotification:
      required:
        - reason
      type: object
      properties:
        reason:
          type: string
          nullable: true
      additionalProperties: false
      x-implements: INotificationContent
    IssueOneTimeCodeResponse:
      type: object
      properties:
        result:
          required:
            - code
            - expires_in
          type: object
          properties:
            code:
              type: string
              description: The one-time use authorization code
            expires_in:
              type: integer
              description: Time in seconds until code expiration
              format: int32
          x-name: OneTimeCodeResponse
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BeginPasswordAuthenticationFlowResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationFlowStage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ContinueAuthenticationFlowWithEmailTotpCodeResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationFlowStage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BeginApiKeyAuthenticationFlowResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationFlowStage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BeginOnBehalfAuthenticationFlowResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationFlowStage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BeginOAuth2AuthenticationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationRedirect'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    CompleteOAuth2AuthenticationResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AuthenticationFlowStage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetReleaseNotesResponse:
      type: object
      properties:
        result:
          type: string
          description: 'Markdown-formatted release notes containing version information, change log, and update details for the current server version.'
          example: "# 2025.3.1\n\n## New Features\n- Added support for game data schema validation\n- Implemented bulk import/export operations\n\n## Improvements\n- Enhanced performance for large datasets\n- Updated documentation\n\n## Bug Fixes\n- Fixed issue with formula calculations\n- Resolved UI rendering problems\n"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    FindDocumentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/FindResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    CreateDocumentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/CreateResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    UpdateDocumentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/UpdateResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    DeleteDocumentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/DeleteResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ListDocumentsResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ListResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BulkChangeDocumentsResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BulkChangeResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    PickDocumentsResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/FindResult'
          description: Ordered results corresponding to the input requests
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ExportResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ExportResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ImportResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BulkChangeResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    BackupResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BackupResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    RestoreResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RestoreResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ValidateResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ValidateResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetLoadingProgressResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ProcessState'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetCapabilitiesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/DataSourceCapabilities'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ExamineResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/StatisticsResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetDataSourcePresentUsersResponse:
      type: object
      properties:
        result:
          type: array
          items:
            required:
              - presence
              - userId
            type: object
            properties:
              presence:
                $ref: '#/components/schemas/PresenceInfo'
              userId:
                type: string
                description: Unique identifier of the user
                format: objectId
            x-name: UserPresenceInfo
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ListProcessesResponse:
      type: object
      properties:
        result:
          required:
            - processes
            - total
          type: object
          properties:
            processes:
              type: array
              items:
                $ref: '#/components/schemas/ProcessState'
              description: Array of process states
            total:
              type: integer
              description: Total number of processes available
              format: int32
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetProcessResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ProcessState'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    StopProcessResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ProcessState'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ListFormulaTypesResponse:
      type: object
      properties:
        result:
          required:
            - types
            - total
          type: object
          properties:
            types:
              type: array
              items:
                $ref: '#/components/schemas/FormulaType'
              description: Matching formula types
            total:
              type: integer
              description: Total number of types matching the query
              format: int32
              nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    ListAssetsResponse:
      type: object
      properties:
        result:
          required:
            - assets
            - total
          type: object
          properties:
            assets:
              type: array
              items:
                $ref: '#/components/schemas/GameAsset'
              description: Matching formula types
            total:
              type: integer
              description: Total number of types matching the query
              format: int32
              nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    SuggestSchemaDesignResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AiCompletionResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    SuggestSchemaIconResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AiCompletionResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    SendAiChatMessageResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AiCompletionResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    TranslateDocumentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/UpdateResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    LoadProjectSharedPreferencesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JsonObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    LoadProjectPersonalPreferencesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JsonObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    LoadWorkspaceSharedPreferencesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JsonObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    LoadWorkspacePersonalPreferencesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JsonObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    LoadDefaultPreferencesResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JsonObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetAllUsersResponse:
      type: object
      properties:
        result:
          required:
            - users
            - total
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            total:
              type: integer
              format: int32
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetPublicUserProfilesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/PublicUserProfile'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetCurrentUserResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/User'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetUserResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/User'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    UpdateUserResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/User'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetPublicUserProfileResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PublicUserProfile'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    AddApiKeyLoginResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/CreatedApiKey'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetAllWorkspacesResponse:
      type: object
      properties:
        result:
          required:
            - processes
            - total
          type: object
          properties:
            processes:
              type: array
              items:
                $ref: '#/components/schemas/Workspace'
            total:
              type: integer
              format: int32
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetCurrentWorkspacesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetWorkspaceResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Workspace'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    UpdateWorkspaceResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Workspace'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetWorkspaceQuotaUsageResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/WorkspaceQuotaUsage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetWorkspaceMembersResponse:
      type: object
      properties:
        result:
          type: array
          items:
            type: string
            format: objectId
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetAllProjectsResponse:
      type: object
      properties:
        result:
          required:
            - processes
            - total
          type: object
          properties:
            processes:
              type: array
              items:
                $ref: '#/components/schemas/Project'
            total:
              type: integer
              format: int32
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    CreateProjectResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Project'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetCurrentProjectsResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetProjectResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Project'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    UpdateProjectResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Project'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetMembershipPackagesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/MembershipPackage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetBillingAccountResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BillingAccount'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    UpdateBillingAccountResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BillingAccount'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetPaymentStatusResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PaymentInvoice'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    StartSubscriptionSessionResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RedirectResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    MakePaymentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RedirectResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetUpcomingPaymentResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PaymentInvoice'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetCustomerPortalUrlResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RedirectResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    SearchResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/SearchResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    CreateResourceResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/StoredResourceMetadata'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetResourceMetadataResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/StoredResourceMetadata'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
    GetContextResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageContext'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
          nullable: true
          readOnly: true
      x-response: true
  parameters:
    processId:
      name: processId
      in: path
      description: Id of process.
      required: true
      schema:
        type: integer
        format: int32
    schemaNameOrId:
      name: schemaNameOrId
      in: path
      description: Id or name of schema.
      required: true
      schema:
        type: string
    dataSourceId:
      name: dataSourceId
      in: path
      description: Id of data source. Usually it is a branchId from one of branches from Project.
      required: true
      schema:
        type: string
        format: objectId
    threadId:
      name: threadId
      in: path
      description: Id of AI chat thread.
      required: true
      schema:
        type: string
    projectId:
      name: projectId
      in: path
      description: Id of project. Project are located within workspace.
      required: true
      schema:
        type: string
        format: objectId
    workspaceId:
      name: workspaceId
      in: path
      description: Id of workspace.
      required: true
      schema:
        type: string
        format: objectId
    userId:
      name: userId
      in: path
      description: Id of user.
      required: true
      schema:
        type: string
        format: objectId
    invitationId:
      name: invitationId
      in: path
      description: Id of invitation.
      required: true
      schema:
        type: string
        format: objectId
    resourceId:
      name: resourceId
      in: path
      description: Id of resource.
      required: true
      schema:
        type: string
        format: objectId
    transactionId:
      name: transactionId
      in: path
      description: Id or name of transaction. Optional.
      required: true
      schema:
        type: string
    branchName:
      name: branchName
      in: path
      description: Name of branch. Branches are located inside Project.
      required: true
      schema:
        $ref: '#/components/schemas/BranchName'
    authenticationProvider:
      name: authenticationProvider
      in: path
      description: Type of OAuth2 provider.
      required: true
      schema:
        $ref: '#/components/schemas/AuthenticationProvider'
    path:
      name: path
      in: path
      description: Captured rest of the path.
      required: true
      schema:
        type: string
      x-wildcard-capture: true
    skip:
      name: skip
      in: query
      description: Number of elements to skip during paging. Aka offset or start.
      schema:
        minimum: 0
        type: integer
        format: int32
        nullable: true
    take:
      name: take
      in: query
      description: Number of elements to take during paging. Aka limit or count.
      schema:
        minimum: 0
        type: integer
        format: int32
        nullable: true
    download:
      name: download
      in: query
      description: Set "Content-Disposition" header in order to make the browser download the result.
      schema:
        type: boolean
        nullable: true
    languages:
      name: languages
      in: query
      description: List of languages on schemas to export. Empty list mean all languages.
      schema:
        type: array
        items:
          type: string
        nullable: true
    properties:
      name: properties
      in: query
      description: List of properties on schemas to export. Id property is always exported. Empty list mean all properties.
      schema:
        type: array
        items:
          type: string
        nullable: true
    schemas:
      name: schemas
      in: query
      description: List of schemas to export/import. Empty list mean all schemas.
      schema:
        type: array
        items:
          type: string
        nullable: true
    importSchemaNameOrId:
      name: schemaNameOrId
      in: query
      description: Id or name of schema in case if request body is array.
      schema:
        type: string
        nullable: true
    exportMode:
      name: exportMode
      in: query
      description: Export mode.
      required: true
      schema:
        $ref: '#/components/schemas/ExportMode'
    importMode:
      name: importMode
      in: query
      description: Import mode.
      required: true
      schema:
        $ref: '#/components/schemas/ImportMode'
    translationMode:
      name: translationMode
      in: query
      description: Translation mode.
      required: true
      schema:
        $ref: '#/components/schemas/TranslationMode'
    validationOptions:
      name: validationOptions
      in: query
      description: Data source validation options.
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ValidationOption'
    dryRun:
      name: dryRun
      in: query
      description: Perform dry run of operation and don't persist changes'.
      required: true
      schema:
        type: boolean
    transaction:
      name: transactionId
      in: query
      description: Id or name of transaction.
      schema:
        type: string
        nullable: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer